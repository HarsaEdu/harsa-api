// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/HarsaEdu/harsa-api/internal/model/domain"
	mock "github.com/stretchr/testify/mock"
)

// CertificateRepository is an autogenerated mock type for the CertificateRepository type
type CertificateRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: certificate
func (_m *CertificateRepository) Create(certificate *domain.Certificate) error {
	ret := _m.Called(certificate)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Certificate) error); ok {
		r0 = rf(certificate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetById provides a mock function with given fields: id
func (_m *CertificateRepository) GetById(id string) (*domain.Certificate, error) {
	ret := _m.Called(id)

	var r0 *domain.Certificate
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Certificate, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Certificate); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Certificate)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCertificateRepository creates a new instance of CertificateRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCertificateRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CertificateRepository {
	mock := &CertificateRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
