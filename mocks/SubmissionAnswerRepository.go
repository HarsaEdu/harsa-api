// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/HarsaEdu/harsa-api/internal/model/domain"
	mock "github.com/stretchr/testify/mock"
)

// SubmissionAnswerRepository is an autogenerated mock type for the SubmissionAnswerRepository type
type SubmissionAnswerRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: request
func (_m *SubmissionAnswerRepository) Create(request domain.SubmissionAnswer) error {
	ret := _m.Called(request)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.SubmissionAnswer) error); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindById provides a mock function with given fields: id
func (_m *SubmissionAnswerRepository) FindById(id int) (*domain.SubmissionAnswer, error) {
	ret := _m.Called(id)

	var r0 *domain.SubmissionAnswer
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*domain.SubmissionAnswer, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *domain.SubmissionAnswer); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.SubmissionAnswer)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: offset, limit, search, submissionID
func (_m *SubmissionAnswerRepository) Get(offset int, limit int, search string, submissionID uint) ([]domain.SubmissionsAnswerDetail, int64, error) {
	ret := _m.Called(offset, limit, search, submissionID)

	var r0 []domain.SubmissionsAnswerDetail
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, string, uint) ([]domain.SubmissionsAnswerDetail, int64, error)); ok {
		return rf(offset, limit, search, submissionID)
	}
	if rf, ok := ret.Get(0).(func(int, int, string, uint) []domain.SubmissionsAnswerDetail); ok {
		r0 = rf(offset, limit, search, submissionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.SubmissionsAnswerDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string, uint) int64); ok {
		r1 = rf(offset, limit, search, submissionID)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int, string, uint) error); ok {
		r2 = rf(offset, limit, search, submissionID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: request, id, userId
func (_m *SubmissionAnswerRepository) Update(request domain.SubmissionAnswer, id int, userId int) error {
	ret := _m.Called(request, id, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.SubmissionAnswer, int, int) error); ok {
		r0 = rf(request, id, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateWeb provides a mock function with given fields: request, id
func (_m *SubmissionAnswerRepository) UpdateWeb(request domain.SubmissionAnswer, id int) error {
	ret := _m.Called(request, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.SubmissionAnswer, int) error); ok {
		r0 = rf(request, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSubmissionAnswerRepository creates a new instance of SubmissionAnswerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSubmissionAnswerRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *SubmissionAnswerRepository {
	mock := &SubmissionAnswerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
