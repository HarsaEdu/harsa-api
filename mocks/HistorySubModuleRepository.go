// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/HarsaEdu/harsa-api/internal/model/domain"
	mock "github.com/stretchr/testify/mock"
)

// HistorySubModuleRepository is an autogenerated mock type for the HistorySubModuleRepository type
type HistorySubModuleRepository struct {
	mock.Mock
}

// CreateHistorySubModule provides a mock function with given fields: request
func (_m *HistorySubModuleRepository) CreateHistorySubModule(request *domain.HistorySubModule) error {
	ret := _m.Called(request)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.HistorySubModule) error); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetHistorySubModuleByID provides a mock function with given fields: id
func (_m *HistorySubModuleRepository) GetHistorySubModuleByID(id uint) (*domain.HistorySubModule, error) {
	ret := _m.Called(id)

	var r0 *domain.HistorySubModule
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*domain.HistorySubModule, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *domain.HistorySubModule); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.HistorySubModule)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHistorySubModuleByUserID provides a mock function with given fields: userID
func (_m *HistorySubModuleRepository) GetHistorySubModuleByUserID(userID uint) ([]domain.HistorySubModule, int64, error) {
	ret := _m.Called(userID)

	var r0 []domain.HistorySubModule
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(uint) ([]domain.HistorySubModule, int64, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint) []domain.HistorySubModule); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.HistorySubModule)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) int64); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(uint) error); ok {
		r2 = rf(userID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateHistorySubModule provides a mock function with given fields: request, id
func (_m *HistorySubModuleRepository) UpdateHistorySubModule(request *domain.HistorySubModule, id uint) error {
	ret := _m.Called(request, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.HistorySubModule, uint) error); ok {
		r0 = rf(request, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewHistorySubModuleRepository creates a new instance of HistorySubModuleRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHistorySubModuleRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *HistorySubModuleRepository {
	mock := &HistorySubModuleRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
