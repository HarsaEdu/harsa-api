// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/HarsaEdu/harsa-api/internal/model/domain"
	mock "github.com/stretchr/testify/mock"
)

// SubsPlanRepository is an autogenerated mock type for the SubsPlanRepository type
type SubsPlanRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: subsPlan
func (_m *SubsPlanRepository) Create(subsPlan *domain.SubsPlan) error {
	ret := _m.Called(subsPlan)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.SubsPlan) error); ok {
		r0 = rf(subsPlan)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *SubsPlanRepository) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindById provides a mock function with given fields: id
func (_m *SubsPlanRepository) FindById(id int) (*domain.SubsPlan, error) {
	ret := _m.Called(id)

	var r0 *domain.SubsPlan
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*domain.SubsPlan, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *domain.SubsPlan); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.SubsPlan)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: search
func (_m *SubsPlanRepository) GetAll(search string) ([]domain.SubsPlan, int64, error) {
	ret := _m.Called(search)

	var r0 []domain.SubsPlan
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(string) ([]domain.SubsPlan, int64, error)); ok {
		return rf(search)
	}
	if rf, ok := ret.Get(0).(func(string) []domain.SubsPlan); ok {
		r0 = rf(search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.SubsPlan)
		}
	}

	if rf, ok := ret.Get(1).(func(string) int64); ok {
		r1 = rf(search)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(search)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: subsPlan, id
func (_m *SubsPlanRepository) Update(subsPlan *domain.SubsPlan, id int) error {
	ret := _m.Called(subsPlan, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.SubsPlan, int) error); ok {
		r0 = rf(subsPlan, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSubsPlanRepository creates a new instance of SubsPlanRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSubsPlanRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *SubsPlanRepository {
	mock := &SubsPlanRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
