// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	web "github.com/HarsaEdu/harsa-api/internal/model/web"
)

// ModuleService is an autogenerated mock type for the ModuleService type
type ModuleService struct {
	mock.Mock
}

// CreateModule provides a mock function with given fields: equest, courseId, userId, role
func (_m *ModuleService) CreateModule(equest *web.ModuleRequest, courseId uint, userId uint, role string) error {
	ret := _m.Called(equest, courseId, userId, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(*web.ModuleRequest, uint, uint, string) error); ok {
		r0 = rf(equest, courseId, userId, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSection provides a mock function with given fields: request, courseId, userId, role
func (_m *ModuleService) CreateSection(request *web.SectionRequest, courseId uint, userId uint, role string) error {
	ret := _m.Called(request, courseId, userId, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(*web.SectionRequest, uint, uint, string) error); ok {
		r0 = rf(request, courseId, userId, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteModule provides a mock function with given fields: moduleId, userId, role
func (_m *ModuleService) DeleteModule(moduleId uint, userId uint, role string) error {
	ret := _m.Called(moduleId, userId, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint, string) error); ok {
		r0 = rf(moduleId, userId, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSection provides a mock function with given fields: sectionId, userId, role
func (_m *ModuleService) DeleteSection(sectionId uint, userId uint, role string) error {
	ret := _m.Called(sectionId, userId, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint, string) error); ok {
		r0 = rf(sectionId, userId, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSubModule provides a mock function with given fields: subModuleId, userId, role
func (_m *ModuleService) DeleteSubModule(subModuleId uint, userId uint, role string) error {
	ret := _m.Called(subModuleId, userId, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint, string) error); ok {
		r0 = rf(subModuleId, userId, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllModuleBySectionId provides a mock function with given fields: sectionId
func (_m *ModuleService) GetAllModuleBySectionId(sectionId uint) (*web.SectionResponse, error) {
	ret := _m.Called(sectionId)

	var r0 *web.SectionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*web.SectionResponse, error)); ok {
		return rf(sectionId)
	}
	if rf, ok := ret.Get(0).(func(uint) *web.SectionResponse); ok {
		r0 = rf(sectionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*web.SectionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(sectionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllSectionByCourseId provides a mock function with given fields: offset, limit, search, courseId
func (_m *ModuleService) GetAllSectionByCourseId(offset int, limit int, search string, courseId uint) ([]web.SectionResponse, *web.Pagination, error) {
	ret := _m.Called(offset, limit, search, courseId)

	var r0 []web.SectionResponse
	var r1 *web.Pagination
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, string, uint) ([]web.SectionResponse, *web.Pagination, error)); ok {
		return rf(offset, limit, search, courseId)
	}
	if rf, ok := ret.Get(0).(func(int, int, string, uint) []web.SectionResponse); ok {
		r0 = rf(offset, limit, search, courseId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]web.SectionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string, uint) *web.Pagination); ok {
		r1 = rf(offset, limit, search, courseId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*web.Pagination)
		}
	}

	if rf, ok := ret.Get(2).(func(int, int, string, uint) error); ok {
		r2 = rf(offset, limit, search, courseId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetModuleById provides a mock function with given fields: moduleId
func (_m *ModuleService) GetModuleById(moduleId uint) (*web.ModuleResponse, error) {
	ret := _m.Called(moduleId)

	var r0 *web.ModuleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*web.ModuleResponse, error)); ok {
		return rf(moduleId)
	}
	if rf, ok := ret.Get(0).(func(uint) *web.ModuleResponse); ok {
		r0 = rf(moduleId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*web.ModuleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(moduleId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateModule provides a mock function with given fields: request, moduleId, userId, role
func (_m *ModuleService) UpdateModule(request *web.ModuleRequest, moduleId uint, userId uint, role string) error {
	ret := _m.Called(request, moduleId, userId, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(*web.ModuleRequest, uint, uint, string) error); ok {
		r0 = rf(request, moduleId, userId, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateModuleOrder provides a mock function with given fields: request, moduleId, userId, role
func (_m *ModuleService) UpdateModuleOrder(request *web.ModuleOrderRequest, moduleId uint, userId uint, role string) error {
	ret := _m.Called(request, moduleId, userId, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(*web.ModuleOrderRequest, uint, uint, string) error); ok {
		r0 = rf(request, moduleId, userId, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSection provides a mock function with given fields: request, sectionId, userId, role
func (_m *ModuleService) UpdateSection(request *web.SectionUpdateRequest, sectionId uint, userId uint, role string) error {
	ret := _m.Called(request, sectionId, userId, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(*web.SectionUpdateRequest, uint, uint, string) error); ok {
		r0 = rf(request, sectionId, userId, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSectionOrder provides a mock function with given fields: request, sectionId, userId, role
func (_m *ModuleService) UpdateSectionOrder(request *web.SectionOrderRequest, sectionId uint, userId uint, role string) error {
	ret := _m.Called(request, sectionId, userId, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(*web.SectionOrderRequest, uint, uint, string) error); ok {
		r0 = rf(request, sectionId, userId, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewModuleService creates a new instance of ModuleService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewModuleService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ModuleService {
	mock := &ModuleService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
