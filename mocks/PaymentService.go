// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	web "github.com/HarsaEdu/harsa-api/internal/model/web"
)

// PaymentService is an autogenerated mock type for the PaymentService type
type PaymentService struct {
	mock.Mock
}

// CreatePaymentSubscription provides a mock function with given fields: request, userId
func (_m *PaymentService) CreatePaymentSubscription(request *web.CreatePaymentSubscriptionRequest, userId uint) (*web.GetPaymentResponse, error) {
	ret := _m.Called(request, userId)

	var r0 *web.GetPaymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*web.CreatePaymentSubscriptionRequest, uint) (*web.GetPaymentResponse, error)); ok {
		return rf(request, userId)
	}
	if rf, ok := ret.Get(0).(func(*web.CreatePaymentSubscriptionRequest, uint) *web.GetPaymentResponse); ok {
		r0 = rf(request, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*web.GetPaymentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*web.CreatePaymentSubscriptionRequest, uint) error); ok {
		r1 = rf(request, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllPaymentHistory provides a mock function with given fields: offset, limit, search, status
func (_m *PaymentService) GetAllPaymentHistory(offset int, limit int, search string, status string) ([]web.GetPaymentResponse, *web.Pagination, error) {
	ret := _m.Called(offset, limit, search, status)

	var r0 []web.GetPaymentResponse
	var r1 *web.Pagination
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, string, string) ([]web.GetPaymentResponse, *web.Pagination, error)); ok {
		return rf(offset, limit, search, status)
	}
	if rf, ok := ret.Get(0).(func(int, int, string, string) []web.GetPaymentResponse); ok {
		r0 = rf(offset, limit, search, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]web.GetPaymentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string, string) *web.Pagination); ok {
		r1 = rf(offset, limit, search, status)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*web.Pagination)
		}
	}

	if rf, ok := ret.Get(2).(func(int, int, string, string) error); ok {
		r2 = rf(offset, limit, search, status)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAllPaymentHistoryByUserId provides a mock function with given fields: userId, offset, limit, search, status
func (_m *PaymentService) GetAllPaymentHistoryByUserId(userId uint, offset int, limit int, search string, status string) ([]web.GetPaymentResponse, *web.Pagination, error) {
	ret := _m.Called(userId, offset, limit, search, status)

	var r0 []web.GetPaymentResponse
	var r1 *web.Pagination
	var r2 error
	if rf, ok := ret.Get(0).(func(uint, int, int, string, string) ([]web.GetPaymentResponse, *web.Pagination, error)); ok {
		return rf(userId, offset, limit, search, status)
	}
	if rf, ok := ret.Get(0).(func(uint, int, int, string, string) []web.GetPaymentResponse); ok {
		r0 = rf(userId, offset, limit, search, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]web.GetPaymentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, int, int, string, string) *web.Pagination); ok {
		r1 = rf(userId, offset, limit, search, status)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*web.Pagination)
		}
	}

	if rf, ok := ret.Get(2).(func(uint, int, int, string, string) error); ok {
		r2 = rf(userId, offset, limit, search, status)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetPaymentHistoryById provides a mock function with given fields: orderId
func (_m *PaymentService) GetPaymentHistoryById(orderId string) (*web.GetPaymentResponse, error) {
	ret := _m.Called(orderId)

	var r0 *web.GetPaymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*web.GetPaymentResponse, error)); ok {
		return rf(orderId)
	}
	if rf, ok := ret.Get(0).(func(string) *web.GetPaymentResponse); ok {
		r0 = rf(orderId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*web.GetPaymentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orderId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaymentHistoryByUserIdAndPaymentId provides a mock function with given fields: userId, paymentId
func (_m *PaymentService) GetPaymentHistoryByUserIdAndPaymentId(userId uint, paymentId string) (*web.GetPaymentResponse, error) {
	ret := _m.Called(userId, paymentId)

	var r0 *web.GetPaymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, string) (*web.GetPaymentResponse, error)); ok {
		return rf(userId, paymentId)
	}
	if rf, ok := ret.Get(0).(func(uint, string) *web.GetPaymentResponse); ok {
		r0 = rf(userId, paymentId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*web.GetPaymentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, string) error); ok {
		r1 = rf(userId, paymentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotificationPayment provides a mock function with given fields: notificationPayload
func (_m *PaymentService) NotificationPayment(notificationPayload map[string]interface{}) error {
	ret := _m.Called(notificationPayload)

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}) error); ok {
		r0 = rf(notificationPayload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPaymentService creates a new instance of PaymentService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentService(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentService {
	mock := &PaymentService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
