// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"

	web "github.com/HarsaEdu/harsa-api/internal/model/web"
)

// SubmissionAnswerService is an autogenerated mock type for the SubmissionAnswerService type
type SubmissionAnswerService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, request, idSubmission, idUser
func (_m *SubmissionAnswerService) Create(ctx echo.Context, request *web.SubmissionAnswerRequest, idSubmission int, idUser int) error {
	ret := _m.Called(ctx, request, idSubmission, idUser)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, *web.SubmissionAnswerRequest, int, int) error); ok {
		r0 = rf(ctx, request, idSubmission, idUser)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindById provides a mock function with given fields: id
func (_m *SubmissionAnswerService) FindById(id int) (*web.SubmissionAnswerResponseMobile, error) {
	ret := _m.Called(id)

	var r0 *web.SubmissionAnswerResponseMobile
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*web.SubmissionAnswerResponseMobile, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *web.SubmissionAnswerResponseMobile); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*web.SubmissionAnswerResponseMobile)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: offset, limit, submissionID, search
func (_m *SubmissionAnswerService) Get(offset int, limit int, submissionID int, search string) ([]web.SubmissionAnswerList, *web.Pagination, error) {
	ret := _m.Called(offset, limit, submissionID, search)

	var r0 []web.SubmissionAnswerList
	var r1 *web.Pagination
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, int, string) ([]web.SubmissionAnswerList, *web.Pagination, error)); ok {
		return rf(offset, limit, submissionID, search)
	}
	if rf, ok := ret.Get(0).(func(int, int, int, string) []web.SubmissionAnswerList); ok {
		r0 = rf(offset, limit, submissionID, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]web.SubmissionAnswerList)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, int, string) *web.Pagination); ok {
		r1 = rf(offset, limit, submissionID, search)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*web.Pagination)
		}
	}

	if rf, ok := ret.Get(2).(func(int, int, int, string) error); ok {
		r2 = rf(offset, limit, submissionID, search)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: ctx, request, id, idUser
func (_m *SubmissionAnswerService) Update(ctx echo.Context, request *web.SubmissionAnswerUpdateRequest, id int, idUser int) error {
	ret := _m.Called(ctx, request, id, idUser)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, *web.SubmissionAnswerUpdateRequest, int, int) error); ok {
		r0 = rf(ctx, request, id, idUser)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateWeb provides a mock function with given fields: ctx, request, id
func (_m *SubmissionAnswerService) UpdateWeb(ctx echo.Context, request *web.SubmissionAnswerUpdateWeb, id int) error {
	ret := _m.Called(ctx, request, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, *web.SubmissionAnswerUpdateWeb, int) error); ok {
		r0 = rf(ctx, request, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSubmissionAnswerService creates a new instance of SubmissionAnswerService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSubmissionAnswerService(t interface {
	mock.TestingT
	Cleanup(func())
}) *SubmissionAnswerService {
	mock := &SubmissionAnswerService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
