// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	web "github.com/HarsaEdu/harsa-api/internal/model/web"
)

// QuizzesService is an autogenerated mock type for the QuizzesService type
type QuizzesService struct {
	mock.Mock
}

// Create provides a mock function with given fields: request, role
func (_m *QuizzesService) Create(request web.QuizRequest, role string) error {
	ret := _m.Called(request, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(web.QuizRequest, string) error); ok {
		r0 = rf(request, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: userId, quizId, role
func (_m *QuizzesService) Delete(userId uint, quizId uint, role string) error {
	ret := _m.Called(userId, quizId, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint, string) error); ok {
		r0 = rf(userId, quizId, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindById provides a mock function with given fields: quizId
func (_m *QuizzesService) FindById(quizId uint) (*web.QuizResponse, error) {
	ret := _m.Called(quizId)

	var r0 *web.QuizResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*web.QuizResponse, error)); ok {
		return rf(quizId)
	}
	if rf, ok := ret.Get(0).(func(uint) *web.QuizResponse); ok {
		r0 = rf(quizId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*web.QuizResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(quizId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByIdMobile provides a mock function with given fields: quizId
func (_m *QuizzesService) FindByIdMobile(quizId uint) (*web.QuizResponse, error) {
	ret := _m.Called(quizId)

	var r0 *web.QuizResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*web.QuizResponse, error)); ok {
		return rf(quizId)
	}
	if rf, ok := ret.Get(0).(func(uint) *web.QuizResponse); ok {
		r0 = rf(quizId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*web.QuizResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(quizId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: moduleId, offset, limit, search
func (_m *QuizzesService) GetAll(moduleId uint, offset int, limit int, search string) ([]web.GetAllQuizResponse, *web.Pagination, error) {
	ret := _m.Called(moduleId, offset, limit, search)

	var r0 []web.GetAllQuizResponse
	var r1 *web.Pagination
	var r2 error
	if rf, ok := ret.Get(0).(func(uint, int, int, string) ([]web.GetAllQuizResponse, *web.Pagination, error)); ok {
		return rf(moduleId, offset, limit, search)
	}
	if rf, ok := ret.Get(0).(func(uint, int, int, string) []web.GetAllQuizResponse); ok {
		r0 = rf(moduleId, offset, limit, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]web.GetAllQuizResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, int, int, string) *web.Pagination); ok {
		r1 = rf(moduleId, offset, limit, search)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*web.Pagination)
		}
	}

	if rf, ok := ret.Get(2).(func(uint, int, int, string) error); ok {
		r2 = rf(moduleId, offset, limit, search)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: request, quizId, role
func (_m *QuizzesService) Update(request web.QuizRequest, quizId uint, role string) error {
	ret := _m.Called(request, quizId, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(web.QuizRequest, uint, string) error); ok {
		r0 = rf(request, quizId, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewQuizzesService creates a new instance of QuizzesService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQuizzesService(t interface {
	mock.TestingT
	Cleanup(func())
}) *QuizzesService {
	mock := &QuizzesService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
