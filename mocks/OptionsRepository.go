// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/HarsaEdu/harsa-api/internal/model/domain"
	mock "github.com/stretchr/testify/mock"
)

// OptionsRepository is an autogenerated mock type for the OptionsRepository type
type OptionsRepository struct {
	mock.Mock
}

// CekIdFromOption provides a mock function with given fields: userId, optionId, role
func (_m *OptionsRepository) CekIdFromOption(userId uint, optionId uint, role string) (*domain.Options, error) {
	ret := _m.Called(userId, optionId, role)

	var r0 *domain.Options
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint, string) (*domain.Options, error)); ok {
		return rf(userId, optionId, role)
	}
	if rf, ok := ret.Get(0).(func(uint, uint, string) *domain.Options); ok {
		r0 = rf(userId, optionId, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Options)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint, string) error); ok {
		r1 = rf(userId, optionId, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: option
func (_m *OptionsRepository) Delete(option *domain.Options) error {
	ret := _m.Called(option)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Options) error); ok {
		r0 = rf(option)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOptionsRepository creates a new instance of OptionsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOptionsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OptionsRepository {
	mock := &OptionsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
