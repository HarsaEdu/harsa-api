// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/HarsaEdu/harsa-api/internal/model/domain"
	mock "github.com/stretchr/testify/mock"
)

// QuizzesRepository is an autogenerated mock type for the QuizzesRepository type
type QuizzesRepository struct {
	mock.Mock
}

// CekIdFromModule provides a mock function with given fields: userId, moduleId, role
func (_m *QuizzesRepository) CekIdFromModule(userId uint, moduleId uint, role string) error {
	ret := _m.Called(userId, moduleId, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint, string) error); ok {
		r0 = rf(userId, moduleId, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CekIdFromQuiz provides a mock function with given fields: userId, quizId, role
func (_m *QuizzesRepository) CekIdFromQuiz(userId uint, quizId uint, role string) (*domain.Quizzes, error) {
	ret := _m.Called(userId, quizId, role)

	var r0 *domain.Quizzes
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint, string) (*domain.Quizzes, error)); ok {
		return rf(userId, quizId, role)
	}
	if rf, ok := ret.Get(0).(func(uint, uint, string) *domain.Quizzes); ok {
		r0 = rf(userId, quizId, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Quizzes)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint, string) error); ok {
		r1 = rf(userId, quizId, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: newQuiz
func (_m *QuizzesRepository) Create(newQuiz *domain.Quizzes) error {
	ret := _m.Called(newQuiz)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Quizzes) error); ok {
		r0 = rf(newQuiz)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: quiz
func (_m *QuizzesRepository) Delete(quiz *domain.Quizzes) error {
	ret := _m.Called(quiz)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Quizzes) error); ok {
		r0 = rf(quiz)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindById provides a mock function with given fields: quizId
func (_m *QuizzesRepository) FindById(quizId uint) (*domain.Quizzes, error) {
	ret := _m.Called(quizId)

	var r0 *domain.Quizzes
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*domain.Quizzes, error)); ok {
		return rf(quizId)
	}
	if rf, ok := ret.Get(0).(func(uint) *domain.Quizzes); ok {
		r0 = rf(quizId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Quizzes)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(quizId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: moduleId, offset, limit, search
func (_m *QuizzesRepository) GetAll(moduleId uint, offset int, limit int, search string) ([]domain.Quizzes, int64, error) {
	ret := _m.Called(moduleId, offset, limit, search)

	var r0 []domain.Quizzes
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(uint, int, int, string) ([]domain.Quizzes, int64, error)); ok {
		return rf(moduleId, offset, limit, search)
	}
	if rf, ok := ret.Get(0).(func(uint, int, int, string) []domain.Quizzes); ok {
		r0 = rf(moduleId, offset, limit, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Quizzes)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, int, int, string) int64); ok {
		r1 = rf(moduleId, offset, limit, search)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(uint, int, int, string) error); ok {
		r2 = rf(moduleId, offset, limit, search)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: UpdateQuiz, quizExist
func (_m *QuizzesRepository) Update(UpdateQuiz *domain.Quizzes, quizExist *domain.Quizzes) error {
	ret := _m.Called(UpdateQuiz, quizExist)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Quizzes, *domain.Quizzes) error); ok {
		r0 = rf(UpdateQuiz, quizExist)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewQuizzesRepository creates a new instance of QuizzesRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQuizzesRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *QuizzesRepository {
	mock := &QuizzesRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
