// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"
)

// SubscriptionService is an autogenerated mock type for the SubscriptionService type
type SubscriptionService struct {
	mock.Mock
}

// IsSubscription provides a mock function with given fields: ctx, user_id
func (_m *SubscriptionService) IsSubscription(ctx echo.Context, user_id uint) (bool, error) {
	ret := _m.Called(ctx, user_id)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, uint) (bool, error)); ok {
		return rf(ctx, user_id)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, uint) bool); ok {
		r0 = rf(ctx, user_id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(echo.Context, uint) error); ok {
		r1 = rf(ctx, user_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsSubscriptionWeb provides a mock function with given fields: createdAt, user_id
func (_m *SubscriptionService) IsSubscriptionWeb(createdAt int64, user_id uint) (bool, error) {
	ret := _m.Called(createdAt, user_id)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, uint) (bool, error)); ok {
		return rf(createdAt, user_id)
	}
	if rf, ok := ret.Get(0).(func(int64, uint) bool); ok {
		r0 = rf(createdAt, user_id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int64, uint) error); ok {
		r1 = rf(createdAt, user_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscriptionAdd provides a mock function with given fields: user_id, days
func (_m *SubscriptionService) SubscriptionAdd(user_id uint, days uint) error {
	ret := _m.Called(user_id, days)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(user_id, days)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSubscriptionService creates a new instance of SubscriptionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSubscriptionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *SubscriptionService {
	mock := &SubscriptionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
