// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/HarsaEdu/harsa-api/internal/model/domain"
	coreapi "github.com/midtrans/midtrans-go/coreapi"

	mock "github.com/stretchr/testify/mock"
)

// MidtransCoreApi is an autogenerated mock type for the MidtransCoreApi type
type MidtransCoreApi struct {
	mock.Mock
}

// ChargeTransaction provides a mock function with given fields: request
func (_m *MidtransCoreApi) ChargeTransaction(request *coreapi.ChargeReq) (*coreapi.ChargeResponse, error) {
	ret := _m.Called(request)

	var r0 *coreapi.ChargeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*coreapi.ChargeReq) (*coreapi.ChargeResponse, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*coreapi.ChargeReq) *coreapi.ChargeResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coreapi.ChargeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*coreapi.ChargeReq) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckTransactionStatus provides a mock function with given fields: orderId
func (_m *MidtransCoreApi) CheckTransactionStatus(orderId string) (string, *domain.PaymentTransactionStatus, error) {
	ret := _m.Called(orderId)

	var r0 string
	var r1 *domain.PaymentTransactionStatus
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (string, *domain.PaymentTransactionStatus, error)); ok {
		return rf(orderId)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(orderId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) *domain.PaymentTransactionStatus); ok {
		r1 = rf(orderId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.PaymentTransactionStatus)
		}
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(orderId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewMidtransCoreApi creates a new instance of MidtransCoreApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMidtransCoreApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *MidtransCoreApi {
	mock := &MidtransCoreApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
