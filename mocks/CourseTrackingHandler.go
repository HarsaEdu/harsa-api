// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"

	mock "github.com/stretchr/testify/mock"
)

// CourseTrackingHandler is an autogenerated mock type for the CourseTrackingHandler type
type CourseTrackingHandler struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx
func (_m *CourseTrackingHandler) Create(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateWeb provides a mock function with given fields: ctx
func (_m *CourseTrackingHandler) CreateWeb(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteEnrolled provides a mock function with given fields: ctx
func (_m *CourseTrackingHandler) DeleteEnrolled(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindModuleHistory provides a mock function with given fields: ctx
func (_m *CourseTrackingHandler) FindModuleHistory(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindQuizzByID provides a mock function with given fields: ctx
func (_m *CourseTrackingHandler) FindQuizzByID(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindSub provides a mock function with given fields: ctx
func (_m *CourseTrackingHandler) FindSub(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindSubModuleByID provides a mock function with given fields: ctx
func (_m *CourseTrackingHandler) FindSubModuleByID(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindSubmissionByID provides a mock function with given fields: ctx
func (_m *CourseTrackingHandler) FindSubmissionByID(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllTracking provides a mock function with given fields: ctx
func (_m *CourseTrackingHandler) GetAllTracking(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllTrackingUserWeb provides a mock function with given fields: ctx
func (_m *CourseTrackingHandler) GetAllTrackingUserWeb(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllTrackingWeb provides a mock function with given fields: ctx
func (_m *CourseTrackingHandler) GetAllTrackingWeb(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByUserIdAndCourseID provides a mock function with given fields: ctx
func (_m *CourseTrackingHandler) GetByUserIdAndCourseID(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCourseTrackingHandler creates a new instance of CourseTrackingHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCourseTrackingHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *CourseTrackingHandler {
	mock := &CourseTrackingHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
