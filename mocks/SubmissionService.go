// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"

	web "github.com/HarsaEdu/harsa-api/internal/model/web"
)

// SubmissionService is an autogenerated mock type for the SubmissionService type
type SubmissionService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, request, userId, role
func (_m *SubmissionService) Create(ctx echo.Context, request web.SubmissionRequest, userId uint, role string) error {
	ret := _m.Called(ctx, request, userId, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, web.SubmissionRequest, uint, string) error); ok {
		r0 = rf(ctx, request, userId, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id, userId, role
func (_m *SubmissionService) Delete(id int, userId uint, role string) error {
	ret := _m.Called(id, userId, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, uint, string) error); ok {
		r0 = rf(id, userId, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindById provides a mock function with given fields: id
func (_m *SubmissionService) FindById(id int) (*web.SubmissionsResponseModule, error) {
	ret := _m.Called(id)

	var r0 *web.SubmissionsResponseModule
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*web.SubmissionsResponseModule, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *web.SubmissionsResponseModule); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*web.SubmissionsResponseModule)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: moduleId
func (_m *SubmissionService) GetAll(moduleId int) ([]web.SubmissionsResponseModule, error) {
	ret := _m.Called(moduleId)

	var r0 []web.SubmissionsResponseModule
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]web.SubmissionsResponseModule, error)); ok {
		return rf(moduleId)
	}
	if rf, ok := ret.Get(0).(func(int) []web.SubmissionsResponseModule); ok {
		r0 = rf(moduleId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]web.SubmissionsResponseModule)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(moduleId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllMobile provides a mock function with given fields: moduleId
func (_m *SubmissionService) GetAllMobile(moduleId int) ([]web.SubmissionsResponseModuleMobile, error) {
	ret := _m.Called(moduleId)

	var r0 []web.SubmissionsResponseModuleMobile
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]web.SubmissionsResponseModuleMobile, error)); ok {
		return rf(moduleId)
	}
	if rf, ok := ret.Get(0).(func(int) []web.SubmissionsResponseModuleMobile); ok {
		r0 = rf(moduleId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]web.SubmissionsResponseModuleMobile)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(moduleId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, request, submissionId, userID, role
func (_m *SubmissionService) Update(ctx echo.Context, request *web.SubmissionUpdateRequest, submissionId int, userID uint, role string) error {
	ret := _m.Called(ctx, request, submissionId, userID, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, *web.SubmissionUpdateRequest, int, uint, string) error); ok {
		r0 = rf(ctx, request, submissionId, userID, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSubmissionService creates a new instance of SubmissionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSubmissionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *SubmissionService {
	mock := &SubmissionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
