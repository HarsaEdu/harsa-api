// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/HarsaEdu/harsa-api/internal/model/domain"
	mock "github.com/stretchr/testify/mock"

	web "github.com/HarsaEdu/harsa-api/internal/model/web"
)

// CourseTrackingRepository is an autogenerated mock type for the CourseTrackingRepository type
type CourseTrackingRepository struct {
	mock.Mock
}

// Cek provides a mock function with given fields: userId, courseId
func (_m *CourseTrackingRepository) Cek(userId uint, courseId uint) (*domain.CourseTracking, error) {
	ret := _m.Called(userId, courseId)

	var r0 *domain.CourseTracking
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) (*domain.CourseTracking, error)); ok {
		return rf(userId, courseId)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) *domain.CourseTracking); ok {
		r0 = rf(userId, courseId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CourseTracking)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(userId, courseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CekIdFromCourse provides a mock function with given fields: userId, trackingID, role
func (_m *CourseTrackingRepository) CekIdFromCourse(userId uint, trackingID uint, role string) (*domain.CourseTracking, error) {
	ret := _m.Called(userId, trackingID, role)

	var r0 *domain.CourseTracking
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint, string) (*domain.CourseTracking, error)); ok {
		return rf(userId, trackingID, role)
	}
	if rf, ok := ret.Get(0).(func(uint, uint, string) *domain.CourseTracking); ok {
		r0 = rf(userId, trackingID, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CourseTracking)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint, string) error); ok {
		r1 = rf(userId, trackingID, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountProgressCourse provides a mock function with given fields: courseID, userID
func (_m *CourseTrackingRepository) CountProgressCourse(courseID uint, userID uint) (float32, error) {
	ret := _m.Called(courseID, userID)

	var r0 float32
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) (float32, error)); ok {
		return rf(courseID, userID)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) float32); ok {
		r0 = rf(courseID, userID)
	} else {
		r0 = ret.Get(0).(float32)
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(courseID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountProgressModule provides a mock function with given fields: moduleID, userID
func (_m *CourseTrackingRepository) CountProgressModule(moduleID uint, userID uint) (float32, error) {
	ret := _m.Called(moduleID, userID)

	var r0 float32
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) (float32, error)); ok {
		return rf(moduleID, userID)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) float32); ok {
		r0 = rf(moduleID, userID)
	} else {
		r0 = ret.Get(0).(float32)
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(moduleID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: enrolled
func (_m *CourseTrackingRepository) Create(enrolled *domain.CourseTracking) error {
	ret := _m.Called(enrolled)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.CourseTracking) error); ok {
		r0 = rf(enrolled)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: tracking
func (_m *CourseTrackingRepository) Delete(tracking *domain.CourseTracking) error {
	ret := _m.Called(tracking)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.CourseTracking) error); ok {
		r0 = rf(tracking)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAllModuleTracking provides a mock function with given fields: sections, userID
func (_m *CourseTrackingRepository) FindAllModuleTracking(sections []domain.Section, userID uint) ([]web.SectionResponseMobile, error) {
	ret := _m.Called(sections, userID)

	var r0 []web.SectionResponseMobile
	var r1 error
	if rf, ok := ret.Get(0).(func([]domain.Section, uint) ([]web.SectionResponseMobile, error)); ok {
		return rf(sections, userID)
	}
	if rf, ok := ret.Get(0).(func([]domain.Section, uint) []web.SectionResponseMobile); ok {
		r0 = rf(sections, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]web.SectionResponseMobile)
		}
	}

	if rf, ok := ret.Get(1).(func([]domain.Section, uint) error); ok {
		r1 = rf(sections, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllModuleTrackingWithProgress provides a mock function with given fields: sections, userID, courseID
func (_m *CourseTrackingRepository) FindAllModuleTrackingWithProgress(sections []domain.Section, userID uint, courseID uint) ([]web.SectionResponseMobile, float32, error) {
	ret := _m.Called(sections, userID, courseID)

	var r0 []web.SectionResponseMobile
	var r1 float32
	var r2 error
	if rf, ok := ret.Get(0).(func([]domain.Section, uint, uint) ([]web.SectionResponseMobile, float32, error)); ok {
		return rf(sections, userID, courseID)
	}
	if rf, ok := ret.Get(0).(func([]domain.Section, uint, uint) []web.SectionResponseMobile); ok {
		r0 = rf(sections, userID, courseID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]web.SectionResponseMobile)
		}
	}

	if rf, ok := ret.Get(1).(func([]domain.Section, uint, uint) float32); ok {
		r1 = rf(sections, userID, courseID)
	} else {
		r1 = ret.Get(1).(float32)
	}

	if rf, ok := ret.Get(2).(func([]domain.Section, uint, uint) error); ok {
		r2 = rf(sections, userID, courseID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindAllQuiz provides a mock function with given fields: moduleId, userID
func (_m *CourseTrackingRepository) FindAllQuiz(moduleId uint, userID uint) ([]web.QuizResponseForTracking, error) {
	ret := _m.Called(moduleId, userID)

	var r0 []web.QuizResponseForTracking
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) ([]web.QuizResponseForTracking, error)); ok {
		return rf(moduleId, userID)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) []web.QuizResponseForTracking); ok {
		r0 = rf(moduleId, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]web.QuizResponseForTracking)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(moduleId, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllSub provides a mock function with given fields: moduleId, userID
func (_m *CourseTrackingRepository) FindAllSub(moduleId uint, userID uint) (*web.CourseTrackingSub, error) {
	ret := _m.Called(moduleId, userID)

	var r0 *web.CourseTrackingSub
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) (*web.CourseTrackingSub, error)); ok {
		return rf(moduleId, userID)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) *web.CourseTrackingSub); ok {
		r0 = rf(moduleId, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*web.CourseTrackingSub)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(moduleId, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllSubModule provides a mock function with given fields: moduleId, userID
func (_m *CourseTrackingRepository) FindAllSubModule(moduleId uint, userID uint) ([]web.SubModuleResponseForTracking, error) {
	ret := _m.Called(moduleId, userID)

	var r0 []web.SubModuleResponseForTracking
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) ([]web.SubModuleResponseForTracking, error)); ok {
		return rf(moduleId, userID)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) []web.SubModuleResponseForTracking); ok {
		r0 = rf(moduleId, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]web.SubModuleResponseForTracking)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(moduleId, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllSubmission provides a mock function with given fields: moduleId, userID
func (_m *CourseTrackingRepository) FindAllSubmission(moduleId uint, userID uint) ([]web.SubmissionsResponseModuleMobile, error) {
	ret := _m.Called(moduleId, userID)

	var r0 []web.SubmissionsResponseModuleMobile
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) ([]web.SubmissionsResponseModuleMobile, error)); ok {
		return rf(moduleId, userID)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) []web.SubmissionsResponseModuleMobile); ok {
		r0 = rf(moduleId, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]web.SubmissionsResponseModuleMobile)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(moduleId, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: courseTrackingId
func (_m *CourseTrackingRepository) FindById(courseTrackingId uint) (*domain.CourseTracking, error) {
	ret := _m.Called(courseTrackingId)

	var r0 *domain.CourseTracking
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*domain.CourseTracking, error)); ok {
		return rf(courseTrackingId)
	}
	if rf, ok := ret.Get(0).(func(uint) *domain.CourseTracking); ok {
		r0 = rf(courseTrackingId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CourseTracking)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(courseTrackingId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUserIdAndCourseID provides a mock function with given fields: courseID, UserID
func (_m *CourseTrackingRepository) FindByUserIdAndCourseID(courseID uint, UserID uint) (*domain.CourseTracking, error) {
	ret := _m.Called(courseID, UserID)

	var r0 *domain.CourseTracking
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) (*domain.CourseTracking, error)); ok {
		return rf(courseID, UserID)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) *domain.CourseTracking); ok {
		r0 = rf(courseID, UserID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CourseTracking)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(courseID, UserID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindModuleTracking provides a mock function with given fields: moduleID, userID
func (_m *CourseTrackingRepository) FindModuleTracking(moduleID uint, userID uint) (*web.ModuleResponseForTracking, error) {
	ret := _m.Called(moduleID, userID)

	var r0 *web.ModuleResponseForTracking
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) (*web.ModuleResponseForTracking, error)); ok {
		return rf(moduleID, userID)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) *web.ModuleResponseForTracking); ok {
		r0 = rf(moduleID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*web.ModuleResponseForTracking)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(moduleID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindQuizzByID provides a mock function with given fields: moduleID, userID, quizID
func (_m *CourseTrackingRepository) FindQuizzByID(moduleID uint, userID uint, quizID uint) (*domain.HistoryQuiz, error) {
	ret := _m.Called(moduleID, userID, quizID)

	var r0 *domain.HistoryQuiz
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint, uint) (*domain.HistoryQuiz, error)); ok {
		return rf(moduleID, userID, quizID)
	}
	if rf, ok := ret.Get(0).(func(uint, uint, uint) *domain.HistoryQuiz); ok {
		r0 = rf(moduleID, userID, quizID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.HistoryQuiz)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint, uint) error); ok {
		r1 = rf(moduleID, userID, quizID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindSubModuleByID provides a mock function with given fields: moduleID, userID, subModuleID
func (_m *CourseTrackingRepository) FindSubModuleByID(moduleID uint, userID uint, subModuleID uint) (*domain.HistorySubModule, *domain.SubModule, error) {
	ret := _m.Called(moduleID, userID, subModuleID)

	var r0 *domain.HistorySubModule
	var r1 *domain.SubModule
	var r2 error
	if rf, ok := ret.Get(0).(func(uint, uint, uint) (*domain.HistorySubModule, *domain.SubModule, error)); ok {
		return rf(moduleID, userID, subModuleID)
	}
	if rf, ok := ret.Get(0).(func(uint, uint, uint) *domain.HistorySubModule); ok {
		r0 = rf(moduleID, userID, subModuleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.HistorySubModule)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint, uint) *domain.SubModule); ok {
		r1 = rf(moduleID, userID, subModuleID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.SubModule)
		}
	}

	if rf, ok := ret.Get(2).(func(uint, uint, uint) error); ok {
		r2 = rf(moduleID, userID, subModuleID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindSubmissionByID provides a mock function with given fields: moduleID, userID, subModuleID
func (_m *CourseTrackingRepository) FindSubmissionByID(moduleID uint, userID uint, subModuleID uint) (*domain.SubmissionAnswer, *domain.Submissions, error) {
	ret := _m.Called(moduleID, userID, subModuleID)

	var r0 *domain.SubmissionAnswer
	var r1 *domain.Submissions
	var r2 error
	if rf, ok := ret.Get(0).(func(uint, uint, uint) (*domain.SubmissionAnswer, *domain.Submissions, error)); ok {
		return rf(moduleID, userID, subModuleID)
	}
	if rf, ok := ret.Get(0).(func(uint, uint, uint) *domain.SubmissionAnswer); ok {
		r0 = rf(moduleID, userID, subModuleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.SubmissionAnswer)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint, uint) *domain.Submissions); ok {
		r1 = rf(moduleID, userID, subModuleID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.Submissions)
		}
	}

	if rf, ok := ret.Get(2).(func(uint, uint, uint) error); ok {
		r2 = rf(moduleID, userID, subModuleID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAllCourseTracking provides a mock function with given fields: offset, limit, userID, search, status
func (_m *CourseTrackingRepository) GetAllCourseTracking(offset int, limit int, userID uint, search string, status string) ([]domain.CourseTracking, int64, error) {
	ret := _m.Called(offset, limit, userID, search, status)

	var r0 []domain.CourseTracking
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, uint, string, string) ([]domain.CourseTracking, int64, error)); ok {
		return rf(offset, limit, userID, search, status)
	}
	if rf, ok := ret.Get(0).(func(int, int, uint, string, string) []domain.CourseTracking); ok {
		r0 = rf(offset, limit, userID, search, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.CourseTracking)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, uint, string, string) int64); ok {
		r1 = rf(offset, limit, userID, search, status)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int, uint, string, string) error); ok {
		r2 = rf(offset, limit, userID, search, status)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAllCourseTrackingMobile provides a mock function with given fields: offset, limit, userID, search, status
func (_m *CourseTrackingRepository) GetAllCourseTrackingMobile(offset int, limit int, userID uint, search string, status string) ([]web.GetAllCourseForTraking, int64, error) {
	ret := _m.Called(offset, limit, userID, search, status)

	var r0 []web.GetAllCourseForTraking
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, uint, string, string) ([]web.GetAllCourseForTraking, int64, error)); ok {
		return rf(offset, limit, userID, search, status)
	}
	if rf, ok := ret.Get(0).(func(int, int, uint, string, string) []web.GetAllCourseForTraking); ok {
		r0 = rf(offset, limit, userID, search, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]web.GetAllCourseForTraking)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, uint, string, string) int64); ok {
		r1 = rf(offset, limit, userID, search, status)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int, uint, string, string) error); ok {
		r2 = rf(offset, limit, userID, search, status)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAllCourseTrackingUserWeb provides a mock function with given fields: offset, limit, courseID, search
func (_m *CourseTrackingRepository) GetAllCourseTrackingUserWeb(offset int, limit int, courseID uint, search string) ([]domain.CourseTracking, int64, error) {
	ret := _m.Called(offset, limit, courseID, search)

	var r0 []domain.CourseTracking
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, uint, string) ([]domain.CourseTracking, int64, error)); ok {
		return rf(offset, limit, courseID, search)
	}
	if rf, ok := ret.Get(0).(func(int, int, uint, string) []domain.CourseTracking); ok {
		r0 = rf(offset, limit, courseID, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.CourseTracking)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, uint, string) int64); ok {
		r1 = rf(offset, limit, courseID, search)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int, uint, string) error); ok {
		r2 = rf(offset, limit, courseID, search)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAllCourseTrackingWeb provides a mock function with given fields: offset, limit, userID
func (_m *CourseTrackingRepository) GetAllCourseTrackingWeb(offset int, limit int, userID uint) ([]domain.CourseTracking, int64, error) {
	ret := _m.Called(offset, limit, userID)

	var r0 []domain.CourseTracking
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, uint) ([]domain.CourseTracking, int64, error)); ok {
		return rf(offset, limit, userID)
	}
	if rf, ok := ret.Get(0).(func(int, int, uint) []domain.CourseTracking); ok {
		r0 = rf(offset, limit, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.CourseTracking)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, uint) int64); ok {
		r1 = rf(offset, limit, userID)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int, uint) error); ok {
		r2 = rf(offset, limit, userID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetCourseIDbyModuleID provides a mock function with given fields: moduleId
func (_m *CourseTrackingRepository) GetCourseIDbyModuleID(moduleId uint) (uint, error) {
	ret := _m.Called(moduleId)

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (uint, error)); ok {
		return rf(moduleId)
	}
	if rf, ok := ret.Get(0).(func(uint) uint); ok {
		r0 = rf(moduleId)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(moduleId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCourseIDbyQuizzesID provides a mock function with given fields: id
func (_m *CourseTrackingRepository) GetCourseIDbyQuizzesID(id uint) (uint, error) {
	ret := _m.Called(id)

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (uint, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) uint); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCourseIDbySubModuleID provides a mock function with given fields: id
func (_m *CourseTrackingRepository) GetCourseIDbySubModuleID(id uint) (uint, error) {
	ret := _m.Called(id)

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (uint, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) uint); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCourseIDbySubmssionID provides a mock function with given fields: id
func (_m *CourseTrackingRepository) GetCourseIDbySubmssionID(id uint) (uint, error) {
	ret := _m.Called(id)

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (uint, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) uint); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCreatedAt provides a mock function with given fields: id
func (_m *CourseTrackingRepository) GetCreatedAt(id uint) (int64, error) {
	ret := _m.Called(id)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (int64, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) int64); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCourseTrackingRepository creates a new instance of CourseTrackingRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCourseTrackingRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CourseTrackingRepository {
	mock := &CourseTrackingRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
