// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/HarsaEdu/harsa-api/internal/model/domain"
	mock "github.com/stretchr/testify/mock"
)

// AuthRepository is an autogenerated mock type for the AuthRepository type
type AuthRepository struct {
	mock.Mock
}

// LoginUser provides a mock function with given fields: id
func (_m *AuthRepository) LoginUser(id uint) (*domain.Auth, error) {
	ret := _m.Called(id)

	var r0 *domain.Auth
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*domain.Auth, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *domain.Auth); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Auth)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: user
func (_m *AuthRepository) RegisterUser(user *domain.User) (*domain.Auth, error) {
	ret := _m.Called(user)

	var r0 *domain.Auth
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.User) (*domain.Auth, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*domain.User) *domain.Auth); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Auth)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAuthRepository creates a new instance of AuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthRepository {
	mock := &AuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
