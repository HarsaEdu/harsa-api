// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/HarsaEdu/harsa-api/internal/model/domain"
	mock "github.com/stretchr/testify/mock"
)

// ProfileRepository is an autogenerated mock type for the ProfileRepository type
type ProfileRepository struct {
	mock.Mock
}

// CreateProfile provides a mock function with given fields: profile
func (_m *ProfileRepository) CreateProfile(profile *domain.UserProfile) error {
	ret := _m.Called(profile)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.UserProfile) error); ok {
		r0 = rf(profile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByUserID provides a mock function with given fields: userID
func (_m *ProfileRepository) FindByUserID(userID uint) (*domain.ProfileDetail, error) {
	ret := _m.Called(userID)

	var r0 *domain.ProfileDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*domain.ProfileDetail, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint) *domain.ProfileDetail); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ProfileDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProfileByID provides a mock function with given fields: profileID
func (_m *ProfileRepository) GetProfileByID(profileID uint) (*domain.ProfileDetail, error) {
	ret := _m.Called(profileID)

	var r0 *domain.ProfileDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*domain.ProfileDetail, error)); ok {
		return rf(profileID)
	}
	if rf, ok := ret.Get(0).(func(uint) *domain.ProfileDetail); ok {
		r0 = rf(profileID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ProfileDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(profileID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsExists provides a mock function with given fields: userID
func (_m *ProfileRepository) IsExists(userID uint) bool {
	ret := _m.Called(userID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint) bool); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// UpdateProfile provides a mock function with given fields: profile
func (_m *ProfileRepository) UpdateProfile(profile *domain.UserProfile) error {
	ret := _m.Called(profile)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.UserProfile) error); ok {
		r0 = rf(profile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewProfileRepository creates a new instance of ProfileRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProfileRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProfileRepository {
	mock := &ProfileRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
