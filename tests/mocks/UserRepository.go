// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/HarsaEdu/harsa-api/internal/model/domain"
	echo "github.com/labstack/echo/v4"

	mock "github.com/stretchr/testify/mock"

	repository "github.com/HarsaEdu/harsa-api/internal/app/user/repository"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// GetUserAccountByID provides a mock function with given fields: userID
func (_m *UserRepository) GetUserAccountByID(userID uint) (*domain.User, error) {
	ret := _m.Called(userID)

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*domain.User, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint) *domain.User); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: userID
func (_m *UserRepository) GetUserByID(userID uint) (*domain.UserDetail, error) {
	ret := _m.Called(userID)

	var r0 *domain.UserDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*domain.UserDetail, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint) *domain.UserDetail); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.UserDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HandleTrx provides a mock function with given fields: ctx, fn
func (_m *UserRepository) HandleTrx(ctx echo.Context, fn func(repository.UserRepository) error) error {
	ret := _m.Called(ctx, fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, func(repository.UserRepository) error) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserAvailable provides a mock function with given fields: username, email
func (_m *UserRepository) UserAvailable(username string, email string) (*domain.User, error) {
	ret := _m.Called(username, email)

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*domain.User, error)); ok {
		return rf(username, email)
	}
	if rf, ok := ret.Get(0).(func(string, string) *domain.User); ok {
		r0 = rf(username, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(username, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserAvailableByID provides a mock function with given fields: id
func (_m *UserRepository) UserAvailableByID(id uint) (*domain.User, error) {
	ret := _m.Called(id)

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*domain.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *domain.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserAvailableEmail provides a mock function with given fields: email
func (_m *UserRepository) UserAvailableEmail(email string) (*domain.User, error) {
	ret := _m.Called(email)

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.User, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserAvailableUsername provides a mock function with given fields: username
func (_m *UserRepository) UserAvailableUsername(username string) (*domain.User, error) {
	ret := _m.Called(username)

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.User, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.User); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserCreate provides a mock function with given fields: user
func (_m *UserRepository) UserCreate(user *domain.User) (*domain.User, error) {
	ret := _m.Called(user)

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.User) (*domain.User, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*domain.User) *domain.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserDelete provides a mock function with given fields: id
func (_m *UserRepository) UserDelete(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserGetAll provides a mock function with given fields: offset, limit, search, roleId
func (_m *UserRepository) UserGetAll(offset int, limit int, search string, roleId int) ([]domain.UserEntity, int64, error) {
	ret := _m.Called(offset, limit, search, roleId)

	var r0 []domain.UserEntity
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, string, int) ([]domain.UserEntity, int64, error)); ok {
		return rf(offset, limit, search, roleId)
	}
	if rf, ok := ret.Get(0).(func(int, int, string, int) []domain.UserEntity); ok {
		r0 = rf(offset, limit, search, roleId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.UserEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string, int) int64); ok {
		r1 = rf(offset, limit, search, roleId)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int, string, int) error); ok {
		r2 = rf(offset, limit, search, roleId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UserGetAllStudentSubscribe provides a mock function with given fields: offset, limit, search, courseId
func (_m *UserRepository) UserGetAllStudentSubscribe(offset int, limit int, search string, courseId uint) ([]domain.UserEntity, int64, error) {
	ret := _m.Called(offset, limit, search, courseId)

	var r0 []domain.UserEntity
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, string, uint) ([]domain.UserEntity, int64, error)); ok {
		return rf(offset, limit, search, courseId)
	}
	if rf, ok := ret.Get(0).(func(int, int, string, uint) []domain.UserEntity); ok {
		r0 = rf(offset, limit, search, courseId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.UserEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string, uint) int64); ok {
		r1 = rf(offset, limit, search, courseId)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int, string, uint) error); ok {
		r2 = rf(offset, limit, search, courseId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UserProfileAvailableByID provides a mock function with given fields: id
func (_m *UserRepository) UserProfileAvailableByID(id uint) (*domain.UserProfile, error) {
	ret := _m.Called(id)

	var r0 *domain.UserProfile
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*domain.UserProfile, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *domain.UserProfile); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.UserProfile)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserProfileCreate provides a mock function with given fields: user
func (_m *UserRepository) UserProfileCreate(user *domain.UserProfile) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.UserProfile) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserProfileUpdate provides a mock function with given fields: userProfile
func (_m *UserRepository) UserProfileUpdate(userProfile *domain.UserProfile) error {
	ret := _m.Called(userProfile)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.UserProfile) error); ok {
		r0 = rf(userProfile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserUpdate provides a mock function with given fields: user
func (_m *UserRepository) UserUpdate(user *domain.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
