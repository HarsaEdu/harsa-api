// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/HarsaEdu/harsa-api/internal/model/domain"
	echo "github.com/labstack/echo/v4"

	mock "github.com/stretchr/testify/mock"

	web "github.com/HarsaEdu/harsa-api/internal/model/web"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// GetUserAccount provides a mock function with given fields: userID
func (_m *UserService) GetUserAccount(userID uint) (*web.UserAccountResponse, error) {
	ret := _m.Called(userID)

	var r0 *web.UserAccountResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*web.UserAccountResponse, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint) *web.UserAccountResponse); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*web.UserAccountResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserDetail provides a mock function with given fields: userRequest
func (_m *UserService) GetUserDetail(userRequest web.UserGetByIDRequest) (*domain.UserDetail, error) {
	ret := _m.Called(userRequest)

	var r0 *domain.UserDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(web.UserGetByIDRequest) (*domain.UserDetail, error)); ok {
		return rf(userRequest)
	}
	if rf, ok := ret.Get(0).(func(web.UserGetByIDRequest) *domain.UserDetail); ok {
		r0 = rf(userRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.UserDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(web.UserGetByIDRequest) error); ok {
		r1 = rf(userRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserCreate provides a mock function with given fields: ctx, userRequest
func (_m *UserService) UserCreate(ctx echo.Context, userRequest web.UserCreateRequest) error {
	ret := _m.Called(ctx, userRequest)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, web.UserCreateRequest) error); ok {
		r0 = rf(ctx, userRequest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserDelete provides a mock function with given fields: userRequest
func (_m *UserService) UserDelete(userRequest web.UserDeleteRequest) error {
	ret := _m.Called(userRequest)

	var r0 error
	if rf, ok := ret.Get(0).(func(web.UserDeleteRequest) error); ok {
		r0 = rf(userRequest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserGetAll provides a mock function with given fields: offset, limit, search, roleId
func (_m *UserService) UserGetAll(offset int, limit int, search string, roleId int) ([]domain.UserEntity, *web.Pagination, error) {
	ret := _m.Called(offset, limit, search, roleId)

	var r0 []domain.UserEntity
	var r1 *web.Pagination
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, string, int) ([]domain.UserEntity, *web.Pagination, error)); ok {
		return rf(offset, limit, search, roleId)
	}
	if rf, ok := ret.Get(0).(func(int, int, string, int) []domain.UserEntity); ok {
		r0 = rf(offset, limit, search, roleId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.UserEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string, int) *web.Pagination); ok {
		r1 = rf(offset, limit, search, roleId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*web.Pagination)
		}
	}

	if rf, ok := ret.Get(2).(func(int, int, string, int) error); ok {
		r2 = rf(offset, limit, search, roleId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UserGetAllStudentSubscribe provides a mock function with given fields: offset, limit, search, courseId
func (_m *UserService) UserGetAllStudentSubscribe(offset int, limit int, search string, courseId uint) ([]domain.UserEntity, *web.Pagination, error) {
	ret := _m.Called(offset, limit, search, courseId)

	var r0 []domain.UserEntity
	var r1 *web.Pagination
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, string, uint) ([]domain.UserEntity, *web.Pagination, error)); ok {
		return rf(offset, limit, search, courseId)
	}
	if rf, ok := ret.Get(0).(func(int, int, string, uint) []domain.UserEntity); ok {
		r0 = rf(offset, limit, search, courseId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.UserEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string, uint) *web.Pagination); ok {
		r1 = rf(offset, limit, search, courseId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*web.Pagination)
		}
	}

	if rf, ok := ret.Get(2).(func(int, int, string, uint) error); ok {
		r2 = rf(offset, limit, search, courseId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UserProfileUpdate provides a mock function with given fields: userRequest
func (_m *UserService) UserProfileUpdate(userRequest web.UserProfileUpdateRequest) error {
	ret := _m.Called(userRequest)

	var r0 error
	if rf, ok := ret.Get(0).(func(web.UserProfileUpdateRequest) error); ok {
		r0 = rf(userRequest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserUpdate provides a mock function with given fields: userRequest
func (_m *UserService) UserUpdate(userRequest web.UserUpdateRequest) error {
	ret := _m.Called(userRequest)

	var r0 error
	if rf, ok := ret.Get(0).(func(web.UserUpdateRequest) error); ok {
		r0 = rf(userRequest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserUpdateMobile provides a mock function with given fields: userRequest
func (_m *UserService) UserUpdateMobile(userRequest web.UserUpdateRequestMobile) error {
	ret := _m.Called(userRequest)

	var r0 error
	if rf, ok := ret.Get(0).(func(web.UserUpdateRequestMobile) error); ok {
		r0 = rf(userRequest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserUpdatePasswordMobile provides a mock function with given fields: userRequest
func (_m *UserService) UserUpdatePasswordMobile(userRequest web.UserUpdatePasswordRequestMobile) error {
	ret := _m.Called(userRequest)

	var r0 error
	if rf, ok := ret.Get(0).(func(web.UserUpdatePasswordRequestMobile) error); ok {
		r0 = rf(userRequest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
