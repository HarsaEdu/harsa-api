// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"

	web "github.com/HarsaEdu/harsa-api/internal/model/web"
)

// CourseTrackingService is an autogenerated mock type for the CourseTrackingService type
type CourseTrackingService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, request
func (_m *CourseTrackingService) Create(ctx echo.Context, request web.CourseTrackingRequest) error {
	ret := _m.Called(ctx, request)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, web.CourseTrackingRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateWeb provides a mock function with given fields: request
func (_m *CourseTrackingService) CreateWeb(request web.CourseTrackingRequest) error {
	ret := _m.Called(request)

	var r0 error
	if rf, ok := ret.Get(0).(func(web.CourseTrackingRequest) error); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: courseTrackingId, courseId, userId, role
func (_m *CourseTrackingService) Delete(courseTrackingId uint, courseId uint, userId uint, role string) error {
	ret := _m.Called(courseTrackingId, courseId, userId, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint, uint, string) error); ok {
		r0 = rf(courseTrackingId, courseId, userId, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByIdMobileByUserIdAndCourseId provides a mock function with given fields: ctx, userID, courseID
func (_m *CourseTrackingService) FindByIdMobileByUserIdAndCourseId(ctx echo.Context, userID uint, courseID uint) (*web.CourseTrackingResponseMobile, error) {
	ret := _m.Called(ctx, userID, courseID)

	var r0 *web.CourseTrackingResponseMobile
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, uint, uint) (*web.CourseTrackingResponseMobile, error)); ok {
		return rf(ctx, userID, courseID)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, uint, uint) *web.CourseTrackingResponseMobile); ok {
		r0 = rf(ctx, userID, courseID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*web.CourseTrackingResponseMobile)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, uint, uint) error); ok {
		r1 = rf(ctx, userID, courseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindModuleHistory provides a mock function with given fields: ctx, moduleID, userID
func (_m *CourseTrackingService) FindModuleHistory(ctx echo.Context, moduleID uint, userID uint) (*web.ModuleTrackingByID, error) {
	ret := _m.Called(ctx, moduleID, userID)

	var r0 *web.ModuleTrackingByID
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, uint, uint) (*web.ModuleTrackingByID, error)); ok {
		return rf(ctx, moduleID, userID)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, uint, uint) *web.ModuleTrackingByID); ok {
		r0 = rf(ctx, moduleID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*web.ModuleTrackingByID)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, uint, uint) error); ok {
		r1 = rf(ctx, moduleID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindQuizzByID provides a mock function with given fields: ctx, moduleID, userID, quizzID
func (_m *CourseTrackingService) FindQuizzByID(ctx echo.Context, moduleID uint, userID uint, quizzID uint) (*web.HistoryQuizIDTracking, error) {
	ret := _m.Called(ctx, moduleID, userID, quizzID)

	var r0 *web.HistoryQuizIDTracking
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, uint, uint, uint) (*web.HistoryQuizIDTracking, error)); ok {
		return rf(ctx, moduleID, userID, quizzID)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, uint, uint, uint) *web.HistoryQuizIDTracking); ok {
		r0 = rf(ctx, moduleID, userID, quizzID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*web.HistoryQuizIDTracking)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, uint, uint, uint) error); ok {
		r1 = rf(ctx, moduleID, userID, quizzID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindSubByIdMobile provides a mock function with given fields: moduleID, userID
func (_m *CourseTrackingService) FindSubByIdMobile(moduleID uint, userID uint) (*web.CourseTrackingSub, error) {
	ret := _m.Called(moduleID, userID)

	var r0 *web.CourseTrackingSub
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) (*web.CourseTrackingSub, error)); ok {
		return rf(moduleID, userID)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) *web.CourseTrackingSub); ok {
		r0 = rf(moduleID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*web.CourseTrackingSub)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(moduleID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindSubModuleByID provides a mock function with given fields: ctx, moduleID, subModuleID, userID
func (_m *CourseTrackingService) FindSubModuleByID(ctx echo.Context, moduleID uint, subModuleID uint, userID uint) (*web.SubModuleTracking, error) {
	ret := _m.Called(ctx, moduleID, subModuleID, userID)

	var r0 *web.SubModuleTracking
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, uint, uint, uint) (*web.SubModuleTracking, error)); ok {
		return rf(ctx, moduleID, subModuleID, userID)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, uint, uint, uint) *web.SubModuleTracking); ok {
		r0 = rf(ctx, moduleID, subModuleID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*web.SubModuleTracking)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, uint, uint, uint) error); ok {
		r1 = rf(ctx, moduleID, subModuleID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindSubmissionByID provides a mock function with given fields: ctx, moduleID, userID, submissionID
func (_m *CourseTrackingService) FindSubmissionByID(ctx echo.Context, moduleID uint, userID uint, submissionID uint) (*web.SubmissionAnswerTrackingByIDResponse, error) {
	ret := _m.Called(ctx, moduleID, userID, submissionID)

	var r0 *web.SubmissionAnswerTrackingByIDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, uint, uint, uint) (*web.SubmissionAnswerTrackingByIDResponse, error)); ok {
		return rf(ctx, moduleID, userID, submissionID)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, uint, uint, uint) *web.SubmissionAnswerTrackingByIDResponse); ok {
		r0 = rf(ctx, moduleID, userID, submissionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*web.SubmissionAnswerTrackingByIDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, uint, uint, uint) error); ok {
		r1 = rf(ctx, moduleID, userID, submissionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllCourseByUserIdMobile provides a mock function with given fields: offset, limit, search, userID, status
func (_m *CourseTrackingService) GetAllCourseByUserIdMobile(offset int, limit int, search string, userID uint, status string) ([]web.GetAllCourseForTraking, *web.Pagination, error) {
	ret := _m.Called(offset, limit, search, userID, status)

	var r0 []web.GetAllCourseForTraking
	var r1 *web.Pagination
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, string, uint, string) ([]web.GetAllCourseForTraking, *web.Pagination, error)); ok {
		return rf(offset, limit, search, userID, status)
	}
	if rf, ok := ret.Get(0).(func(int, int, string, uint, string) []web.GetAllCourseForTraking); ok {
		r0 = rf(offset, limit, search, userID, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]web.GetAllCourseForTraking)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string, uint, string) *web.Pagination); ok {
		r1 = rf(offset, limit, search, userID, status)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*web.Pagination)
		}
	}

	if rf, ok := ret.Get(2).(func(int, int, string, uint, string) error); ok {
		r2 = rf(offset, limit, search, userID, status)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAllCourseByUserIdWeb provides a mock function with given fields: offset, limit, userID
func (_m *CourseTrackingService) GetAllCourseByUserIdWeb(offset int, limit int, userID uint) ([]web.CourseTrackingResponseWeb, *web.Pagination, error) {
	ret := _m.Called(offset, limit, userID)

	var r0 []web.CourseTrackingResponseWeb
	var r1 *web.Pagination
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, uint) ([]web.CourseTrackingResponseWeb, *web.Pagination, error)); ok {
		return rf(offset, limit, userID)
	}
	if rf, ok := ret.Get(0).(func(int, int, uint) []web.CourseTrackingResponseWeb); ok {
		r0 = rf(offset, limit, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]web.CourseTrackingResponseWeb)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, uint) *web.Pagination); ok {
		r1 = rf(offset, limit, userID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*web.Pagination)
		}
	}

	if rf, ok := ret.Get(2).(func(int, int, uint) error); ok {
		r2 = rf(offset, limit, userID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAllUserCourseWeb provides a mock function with given fields: offset, limit, courseID, search
func (_m *CourseTrackingService) GetAllUserCourseWeb(offset int, limit int, courseID uint, search string) ([]web.CourseTrackingUserWeb, *web.Pagination, error) {
	ret := _m.Called(offset, limit, courseID, search)

	var r0 []web.CourseTrackingUserWeb
	var r1 *web.Pagination
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, uint, string) ([]web.CourseTrackingUserWeb, *web.Pagination, error)); ok {
		return rf(offset, limit, courseID, search)
	}
	if rf, ok := ret.Get(0).(func(int, int, uint, string) []web.CourseTrackingUserWeb); ok {
		r0 = rf(offset, limit, courseID, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]web.CourseTrackingUserWeb)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, uint, string) *web.Pagination); ok {
		r1 = rf(offset, limit, courseID, search)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*web.Pagination)
		}
	}

	if rf, ok := ret.Get(2).(func(int, int, uint, string) error); ok {
		r2 = rf(offset, limit, courseID, search)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewCourseTrackingService creates a new instance of CourseTrackingService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCourseTrackingService(t interface {
	mock.TestingT
	Cleanup(func())
}) *CourseTrackingService {
	mock := &CourseTrackingService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
