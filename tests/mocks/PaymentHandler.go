// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"

	mock "github.com/stretchr/testify/mock"
)

// PaymentHandler is an autogenerated mock type for the PaymentHandler type
type PaymentHandler struct {
	mock.Mock
}

// CreatePaymentSubscription provides a mock function with given fields: ctx
func (_m *PaymentHandler) CreatePaymentSubscription(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllPaymentHistory provides a mock function with given fields: ctx
func (_m *PaymentHandler) GetAllPaymentHistory(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllPaymentHistoryByUserId provides a mock function with given fields: ctx
func (_m *PaymentHandler) GetAllPaymentHistoryByUserId(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPaymentHistoryById provides a mock function with given fields: ctx
func (_m *PaymentHandler) GetPaymentHistoryById(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPaymentHistoryByUserIdAndPaymentId provides a mock function with given fields: ctx
func (_m *PaymentHandler) GetPaymentHistoryByUserIdAndPaymentId(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NotificationPayment provides a mock function with given fields: ctx
func (_m *PaymentHandler) NotificationPayment(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPaymentHandler creates a new instance of PaymentHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentHandler {
	mock := &PaymentHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
