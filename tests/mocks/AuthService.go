// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	web "github.com/HarsaEdu/harsa-api/internal/model/web"
)

// AuthService is an autogenerated mock type for the AuthService type
type AuthService struct {
	mock.Mock
}

// GetAccessToken provides a mock function with given fields: tokenRequest
func (_m *AuthService) GetAccessToken(tokenRequest web.AccessTokenRequest) (*web.AuthResponse, error) {
	ret := _m.Called(tokenRequest)

	var r0 *web.AuthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(web.AccessTokenRequest) (*web.AuthResponse, error)); ok {
		return rf(tokenRequest)
	}
	if rf, ok := ret.Get(0).(func(web.AccessTokenRequest) *web.AuthResponse); ok {
		r0 = rf(tokenRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*web.AuthResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(web.AccessTokenRequest) error); ok {
		r1 = rf(tokenRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginUser provides a mock function with given fields: userRequest
func (_m *AuthService) LoginUser(userRequest web.LoginUserRequest) (*web.AuthResponse, error) {
	ret := _m.Called(userRequest)

	var r0 *web.AuthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(web.LoginUserRequest) (*web.AuthResponse, error)); ok {
		return rf(userRequest)
	}
	if rf, ok := ret.Get(0).(func(web.LoginUserRequest) *web.AuthResponse); ok {
		r0 = rf(userRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*web.AuthResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(web.LoginUserRequest) error); ok {
		r1 = rf(userRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: userRequest
func (_m *AuthService) RegisterUser(userRequest web.RegisterUserRequest) (*web.AuthResponse, error) {
	ret := _m.Called(userRequest)

	var r0 *web.AuthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(web.RegisterUserRequest) (*web.AuthResponse, error)); ok {
		return rf(userRequest)
	}
	if rf, ok := ret.Get(0).(func(web.RegisterUserRequest) *web.AuthResponse); ok {
		r0 = rf(userRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*web.AuthResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(web.RegisterUserRequest) error); ok {
		r1 = rf(userRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAuthService creates a new instance of AuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthService {
	mock := &AuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
