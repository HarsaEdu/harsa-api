// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"

	go_openai "github.com/sashabaranov/go-openai"
	mock "github.com/stretchr/testify/mock"
)

// OpenAi is an autogenerated mock type for the OpenAi type
type OpenAi struct {
	mock.Mock
}

// ChatWithAssistant provides a mock function with given fields: threadId, message
func (_m *OpenAi) ChatWithAssistant(threadId string, message string) (string, error) {
	ret := _m.Called(threadId, message)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(threadId, message)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(threadId, message)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(threadId, message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMessageInThread provides a mock function with given fields: ctx, threadId, message
func (_m *OpenAi) CreateMessageInThread(ctx context.Context, threadId string, message string) (go_openai.Message, error) {
	ret := _m.Called(ctx, threadId, message)

	var r0 go_openai.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (go_openai.Message, error)); ok {
		return rf(ctx, threadId, message)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) go_openai.Message); ok {
		r0 = rf(ctx, threadId, message)
	} else {
		r0 = ret.Get(0).(go_openai.Message)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, threadId, message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateThread provides a mock function with given fields: studentName, topic
func (_m *OpenAi) CreateThread(studentName string, topic string) (string, error) {
	ret := _m.Called(studentName, topic)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(studentName, topic)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(studentName, topic)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(studentName, topic)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllMessagesInThread provides a mock function with given fields: threadId, limit, after, before
func (_m *OpenAi) GetAllMessagesInThread(threadId string, limit int, after string, before string) (go_openai.MessagesList, error) {
	ret := _m.Called(threadId, limit, after, before)

	var r0 go_openai.MessagesList
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, string, string) (go_openai.MessagesList, error)); ok {
		return rf(threadId, limit, after, before)
	}
	if rf, ok := ret.Get(0).(func(string, int, string, string) go_openai.MessagesList); ok {
		r0 = rf(threadId, limit, after, before)
	} else {
		r0 = ret.Get(0).(go_openai.MessagesList)
	}

	if rf, ok := ret.Get(1).(func(string, int, string, string) error); ok {
		r1 = rf(threadId, limit, after, before)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResponseMessageInThread provides a mock function with given fields: ctx, threadId
func (_m *OpenAi) GetResponseMessageInThread(ctx context.Context, threadId string) (go_openai.Message, error) {
	ret := _m.Called(ctx, threadId)

	var r0 go_openai.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (go_openai.Message, error)); ok {
		return rf(ctx, threadId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) go_openai.Message); ok {
		r0 = rf(ctx, threadId)
	} else {
		r0 = ret.Get(0).(go_openai.Message)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, threadId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunMessageInThread provides a mock function with given fields: ctx, assistant, threadId
func (_m *OpenAi) RunMessageInThread(ctx context.Context, assistant go_openai.Assistant, threadId string) (go_openai.Run, error) {
	ret := _m.Called(ctx, assistant, threadId)

	var r0 go_openai.Run
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, go_openai.Assistant, string) (go_openai.Run, error)); ok {
		return rf(ctx, assistant, threadId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, go_openai.Assistant, string) go_openai.Run); ok {
		r0 = rf(ctx, assistant, threadId)
	} else {
		r0 = ret.Get(0).(go_openai.Run)
	}

	if rf, ok := ret.Get(1).(func(context.Context, go_openai.Assistant, string) error); ok {
		r1 = rf(ctx, assistant, threadId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOpenAi creates a new instance of OpenAi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOpenAi(t interface {
	mock.TestingT
	Cleanup(func())
}) *OpenAi {
	mock := &OpenAi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
