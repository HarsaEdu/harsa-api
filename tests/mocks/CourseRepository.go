// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/HarsaEdu/harsa-api/internal/model/domain"
	mock "github.com/stretchr/testify/mock"

	web "github.com/HarsaEdu/harsa-api/internal/model/web"
)

// CourseRepository is an autogenerated mock type for the CourseRepository type
type CourseRepository struct {
	mock.Mock
}

// CekIdFromCourse provides a mock function with given fields: userId, courseId, role
func (_m *CourseRepository) CekIdFromCourse(userId uint, courseId uint, role string) (*domain.Course, error) {
	ret := _m.Called(userId, courseId, role)

	var r0 *domain.Course
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint, string) (*domain.Course, error)); ok {
		return rf(userId, courseId, role)
	}
	if rf, ok := ret.Get(0).(func(uint, uint, string) *domain.Course); ok {
		r0 = rf(userId, courseId, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Course)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint, string) error); ok {
		r1 = rf(userId, courseId, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: course
func (_m *CourseRepository) Create(course *domain.Course) error {
	ret := _m.Called(course)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Course) error); ok {
		r0 = rf(course)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: course
func (_m *CourseRepository) Delete(course *domain.Course) error {
	ret := _m.Called(course)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Course) error); ok {
		r0 = rf(course)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: offset, limit, search, category
func (_m *CourseRepository) GetAll(offset int, limit int, search string, category string) ([]domain.Course, int64, error) {
	ret := _m.Called(offset, limit, search, category)

	var r0 []domain.Course
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, string, string) ([]domain.Course, int64, error)); ok {
		return rf(offset, limit, search, category)
	}
	if rf, ok := ret.Get(0).(func(int, int, string, string) []domain.Course); ok {
		r0 = rf(offset, limit, search, category)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Course)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string, string) int64); ok {
		r1 = rf(offset, limit, search, category)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int, string, string) error); ok {
		r2 = rf(offset, limit, search, category)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAllByCategory provides a mock function with given fields: offset, limit, search, categoryId
func (_m *CourseRepository) GetAllByCategory(offset int, limit int, search string, categoryId uint) ([]domain.Course, int64, error) {
	ret := _m.Called(offset, limit, search, categoryId)

	var r0 []domain.Course
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, string, uint) ([]domain.Course, int64, error)); ok {
		return rf(offset, limit, search, categoryId)
	}
	if rf, ok := ret.Get(0).(func(int, int, string, uint) []domain.Course); ok {
		r0 = rf(offset, limit, search, categoryId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Course)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string, uint) int64); ok {
		r1 = rf(offset, limit, search, categoryId)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int, string, uint) error); ok {
		r2 = rf(offset, limit, search, categoryId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAllByUserId provides a mock function with given fields: offset, limit, search, userID
func (_m *CourseRepository) GetAllByUserId(offset int, limit int, search string, userID uint) ([]domain.Course, int64, error) {
	ret := _m.Called(offset, limit, search, userID)

	var r0 []domain.Course
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, string, uint) ([]domain.Course, int64, error)); ok {
		return rf(offset, limit, search, userID)
	}
	if rf, ok := ret.Get(0).(func(int, int, string, uint) []domain.Course); ok {
		r0 = rf(offset, limit, search, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Course)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string, uint) int64); ok {
		r1 = rf(offset, limit, search, userID)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int, string, uint) error); ok {
		r2 = rf(offset, limit, search, userID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAllCourseByRating provides a mock function with given fields: offset, limit, search, category
func (_m *CourseRepository) GetAllCourseByRating(offset int, limit int, search string, category string) ([]domain.Course, int64, error) {
	ret := _m.Called(offset, limit, search, category)

	var r0 []domain.Course
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, string, string) ([]domain.Course, int64, error)); ok {
		return rf(offset, limit, search, category)
	}
	if rf, ok := ret.Get(0).(func(int, int, string, string) []domain.Course); ok {
		r0 = rf(offset, limit, search, category)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Course)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string, string) int64); ok {
		r1 = rf(offset, limit, search, category)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int, string, string) error); ok {
		r2 = rf(offset, limit, search, category)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAllCourseByUserId provides a mock function with given fields: offset, limit, search, userID
func (_m *CourseRepository) GetAllCourseByUserId(offset int, limit int, search string, userID uint) ([]domain.Course, int64, error) {
	ret := _m.Called(offset, limit, search, userID)

	var r0 []domain.Course
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, string, uint) ([]domain.Course, int64, error)); ok {
		return rf(offset, limit, search, userID)
	}
	if rf, ok := ret.Get(0).(func(int, int, string, uint) []domain.Course); ok {
		r0 = rf(offset, limit, search, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Course)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string, uint) int64); ok {
		r1 = rf(offset, limit, search, userID)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int, string, uint) error); ok {
		r2 = rf(offset, limit, search, userID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAllCourseDashBoardIntructur provides a mock function with given fields: offset, limit, search, userID
func (_m *CourseRepository) GetAllCourseDashBoardIntructur(offset int, limit int, search string, userID uint) (*web.DashboardAllCourseIntructur, int64, error) {
	ret := _m.Called(offset, limit, search, userID)

	var r0 *web.DashboardAllCourseIntructur
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, string, uint) (*web.DashboardAllCourseIntructur, int64, error)); ok {
		return rf(offset, limit, search, userID)
	}
	if rf, ok := ret.Get(0).(func(int, int, string, uint) *web.DashboardAllCourseIntructur); ok {
		r0 = rf(offset, limit, search, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*web.DashboardAllCourseIntructur)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string, uint) int64); ok {
		r1 = rf(offset, limit, search, userID)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int, string, uint) error); ok {
		r2 = rf(offset, limit, search, userID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAllbyUserID provides a mock function with given fields: offset, limit, search, category, userID
func (_m *CourseRepository) GetAllbyUserID(offset int, limit int, search string, category string, userID uint) ([]domain.Course, int64, error) {
	ret := _m.Called(offset, limit, search, category, userID)

	var r0 []domain.Course
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, string, string, uint) ([]domain.Course, int64, error)); ok {
		return rf(offset, limit, search, category, userID)
	}
	if rf, ok := ret.Get(0).(func(int, int, string, string, uint) []domain.Course); ok {
		r0 = rf(offset, limit, search, category, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Course)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string, string, uint) int64); ok {
		r1 = rf(offset, limit, search, category, userID)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int, string, string, uint) error); ok {
		r2 = rf(offset, limit, search, category, userID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetById provides a mock function with given fields: id
func (_m *CourseRepository) GetById(id uint) (*domain.Course, error) {
	ret := _m.Called(id)

	var r0 *domain.Course
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*domain.Course, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *domain.Course); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Course)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByIdMobile provides a mock function with given fields: id
func (_m *CourseRepository) GetByIdMobile(id uint) (*domain.Course, int64, int64, error) {
	ret := _m.Called(id)

	var r0 *domain.Course
	var r1 int64
	var r2 int64
	var r3 error
	if rf, ok := ret.Get(0).(func(uint) (*domain.Course, int64, int64, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *domain.Course); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Course)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) int64); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(uint) int64); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Get(2).(int64)
	}

	if rf, ok := ret.Get(3).(func(uint) error); ok {
		r3 = rf(id)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetDashBoardIntructur provides a mock function with given fields: offset, limit, search, userID
func (_m *CourseRepository) GetDashBoardIntructur(offset int, limit int, search string, userID uint) (*web.DashboardIntructur, int64, error) {
	ret := _m.Called(offset, limit, search, userID)

	var r0 *web.DashboardIntructur
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, string, uint) (*web.DashboardIntructur, int64, error)); ok {
		return rf(offset, limit, search, userID)
	}
	if rf, ok := ret.Get(0).(func(int, int, string, uint) *web.DashboardIntructur); ok {
		r0 = rf(offset, limit, search, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*web.DashboardIntructur)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string, uint) int64); ok {
		r1 = rf(offset, limit, search, userID)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int, string, uint) error); ok {
		r2 = rf(offset, limit, search, userID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetDetailDashBoardIntructur provides a mock function with given fields: courseID
func (_m *CourseRepository) GetDetailDashBoardIntructur(courseID uint) (*web.CourseResponseForIntructur, error) {
	ret := _m.Called(courseID)

	var r0 *web.CourseResponseForIntructur
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*web.CourseResponseForIntructur, error)); ok {
		return rf(courseID)
	}
	if rf, ok := ret.Get(0).(func(uint) *web.CourseResponseForIntructur); ok {
		r0 = rf(courseID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*web.CourseResponseForIntructur)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(courseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNameUser provides a mock function with given fields: userId
func (_m *CourseRepository) GetNameUser(userId uint) (string, error) {
	ret := _m.Called(userId)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (string, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(uint) string); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, course
func (_m *CourseRepository) Update(id uint, course *domain.Course) error {
	ret := _m.Called(id, course)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, *domain.Course) error); ok {
		r0 = rf(id, course)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateImage provides a mock function with given fields: course
func (_m *CourseRepository) UpdateImage(course *domain.Course) error {
	ret := _m.Called(course)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Course) error); ok {
		r0 = rf(course)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCourseRepository creates a new instance of CourseRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCourseRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CourseRepository {
	mock := &CourseRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
