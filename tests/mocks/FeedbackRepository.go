// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/HarsaEdu/harsa-api/internal/model/domain"
	mock "github.com/stretchr/testify/mock"
)

// FeedbackRepository is an autogenerated mock type for the FeedbackRepository type
type FeedbackRepository struct {
	mock.Mock
}

// AutoUpdateRating provides a mock function with given fields: courseId
func (_m *FeedbackRepository) AutoUpdateRating(courseId uint) error {
	ret := _m.Called(courseId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(courseId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cek provides a mock function with given fields: userId, courseID
func (_m *FeedbackRepository) Cek(userId uint, courseID uint) (*domain.Feedback, error) {
	ret := _m.Called(userId, courseID)

	var r0 *domain.Feedback
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) (*domain.Feedback, error)); ok {
		return rf(userId, courseID)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) *domain.Feedback); ok {
		r0 = rf(userId, courseID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Feedback)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(userId, courseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: feedback
func (_m *FeedbackRepository) Create(feedback *domain.Feedback) error {
	ret := _m.Called(feedback)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Feedback) error); ok {
		r0 = rf(feedback)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByUserAndCourseId provides a mock function with given fields: userId, courseId
func (_m *FeedbackRepository) DeleteByUserAndCourseId(userId uint, courseId uint) error {
	ret := _m.Called(userId, courseId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(userId, courseId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllByCourseId provides a mock function with given fields: courseId, offset, limit, search
func (_m *FeedbackRepository) GetAllByCourseId(courseId uint, offset int, limit int, search string) ([]domain.Feedback, int64, error) {
	ret := _m.Called(courseId, offset, limit, search)

	var r0 []domain.Feedback
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(uint, int, int, string) ([]domain.Feedback, int64, error)); ok {
		return rf(courseId, offset, limit, search)
	}
	if rf, ok := ret.Get(0).(func(uint, int, int, string) []domain.Feedback); ok {
		r0 = rf(courseId, offset, limit, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Feedback)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, int, int, string) int64); ok {
		r1 = rf(courseId, offset, limit, search)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(uint, int, int, string) error); ok {
		r2 = rf(courseId, offset, limit, search)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetByIdAndCourseId provides a mock function with given fields: courseId, id
func (_m *FeedbackRepository) GetByIdAndCourseId(courseId uint, id uint) (*domain.Feedback, error) {
	ret := _m.Called(courseId, id)

	var r0 *domain.Feedback
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) (*domain.Feedback, error)); ok {
		return rf(courseId, id)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) *domain.Feedback); ok {
		r0 = rf(courseId, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Feedback)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(courseId, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByIdUserAndCourseId provides a mock function with given fields: userId, courseId
func (_m *FeedbackRepository) GetByIdUserAndCourseId(userId uint, courseId uint) (*domain.Feedback, error) {
	ret := _m.Called(userId, courseId)

	var r0 *domain.Feedback
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) (*domain.Feedback, error)); ok {
		return rf(userId, courseId)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) *domain.Feedback); ok {
		r0 = rf(userId, courseId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Feedback)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(userId, courseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateByUserAndCourseId provides a mock function with given fields: userId, courseId, feedback
func (_m *FeedbackRepository) UpdateByUserAndCourseId(userId uint, courseId uint, feedback *domain.Feedback) error {
	ret := _m.Called(userId, courseId, feedback)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint, *domain.Feedback) error); ok {
		r0 = rf(userId, courseId, feedback)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewFeedbackRepository creates a new instance of FeedbackRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFeedbackRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *FeedbackRepository {
	mock := &FeedbackRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
