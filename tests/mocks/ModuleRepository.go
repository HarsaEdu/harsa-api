// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/HarsaEdu/harsa-api/internal/model/domain"
	mock "github.com/stretchr/testify/mock"
)

// ModuleRepository is an autogenerated mock type for the ModuleRepository type
type ModuleRepository struct {
	mock.Mock
}

// CekIdFromCourse provides a mock function with given fields: userId, courseId, role
func (_m *ModuleRepository) CekIdFromCourse(userId uint, courseId uint, role string) error {
	ret := _m.Called(userId, courseId, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint, string) error); ok {
		r0 = rf(userId, courseId, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CekIdFromModule provides a mock function with given fields: userId, moduleId, role
func (_m *ModuleRepository) CekIdFromModule(userId uint, moduleId uint, role string) (*domain.Module, error) {
	ret := _m.Called(userId, moduleId, role)

	var r0 *domain.Module
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint, string) (*domain.Module, error)); ok {
		return rf(userId, moduleId, role)
	}
	if rf, ok := ret.Get(0).(func(uint, uint, string) *domain.Module); ok {
		r0 = rf(userId, moduleId, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Module)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint, string) error); ok {
		r1 = rf(userId, moduleId, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CekIdFromSection provides a mock function with given fields: userId, sectionId, role
func (_m *ModuleRepository) CekIdFromSection(userId uint, sectionId uint, role string) (*domain.Section, error) {
	ret := _m.Called(userId, sectionId, role)

	var r0 *domain.Section
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint, string) (*domain.Section, error)); ok {
		return rf(userId, sectionId, role)
	}
	if rf, ok := ret.Get(0).(func(uint, uint, string) *domain.Section); ok {
		r0 = rf(userId, sectionId, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Section)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint, string) error); ok {
		r1 = rf(userId, sectionId, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CekIdFromSubModule provides a mock function with given fields: userId, subModuleId, role
func (_m *ModuleRepository) CekIdFromSubModule(userId uint, subModuleId uint, role string) (*domain.SubModule, error) {
	ret := _m.Called(userId, subModuleId, role)

	var r0 *domain.SubModule
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint, string) (*domain.SubModule, error)); ok {
		return rf(userId, subModuleId, role)
	}
	if rf, ok := ret.Get(0).(func(uint, uint, string) *domain.SubModule); ok {
		r0 = rf(userId, subModuleId, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.SubModule)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint, string) error); ok {
		r1 = rf(userId, subModuleId, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateModule provides a mock function with given fields: module
func (_m *ModuleRepository) CreateModule(module *domain.Module) error {
	ret := _m.Called(module)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Module) error); ok {
		r0 = rf(module)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSection provides a mock function with given fields: section
func (_m *ModuleRepository) CreateSection(section *domain.Section) error {
	ret := _m.Called(section)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Section) error); ok {
		r0 = rf(section)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteModule provides a mock function with given fields: module
func (_m *ModuleRepository) DeleteModule(module *domain.Module) error {
	ret := _m.Called(module)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Module) error); ok {
		r0 = rf(module)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSection provides a mock function with given fields: section
func (_m *ModuleRepository) DeleteSection(section *domain.Section) error {
	ret := _m.Called(section)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Section) error); ok {
		r0 = rf(section)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSubModule provides a mock function with given fields: subModule
func (_m *ModuleRepository) DeleteSubModule(subModule *domain.SubModule) error {
	ret := _m.Called(subModule)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.SubModule) error); ok {
		r0 = rf(subModule)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllModuleBySecsionId provides a mock function with given fields: sectionId
func (_m *ModuleRepository) GetAllModuleBySecsionId(sectionId uint) (*domain.Section, error) {
	ret := _m.Called(sectionId)

	var r0 *domain.Section
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*domain.Section, error)); ok {
		return rf(sectionId)
	}
	if rf, ok := ret.Get(0).(func(uint) *domain.Section); ok {
		r0 = rf(sectionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Section)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(sectionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllSectionByCourseId provides a mock function with given fields: offset, limit, search, courseId
func (_m *ModuleRepository) GetAllSectionByCourseId(offset int, limit int, search string, courseId uint) ([]domain.Section, int64, error) {
	ret := _m.Called(offset, limit, search, courseId)

	var r0 []domain.Section
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, string, uint) ([]domain.Section, int64, error)); ok {
		return rf(offset, limit, search, courseId)
	}
	if rf, ok := ret.Get(0).(func(int, int, string, uint) []domain.Section); ok {
		r0 = rf(offset, limit, search, courseId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Section)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string, uint) int64); ok {
		r1 = rf(offset, limit, search, courseId)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int, string, uint) error); ok {
		r2 = rf(offset, limit, search, courseId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetByOrderAndCourseId provides a mock function with given fields: order, courseId
func (_m *ModuleRepository) GetByOrderAndCourseId(order int, courseId uint) (*domain.Module, error) {
	ret := _m.Called(order, courseId)

	var r0 *domain.Module
	var r1 error
	if rf, ok := ret.Get(0).(func(int, uint) (*domain.Module, error)); ok {
		return rf(order, courseId)
	}
	if rf, ok := ret.Get(0).(func(int, uint) *domain.Module); ok {
		r0 = rf(order, courseId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Module)
		}
	}

	if rf, ok := ret.Get(1).(func(int, uint) error); ok {
		r1 = rf(order, courseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOrderSectionAndCourseId provides a mock function with given fields: order, courseId
func (_m *ModuleRepository) GetByOrderSectionAndCourseId(order int, courseId uint) (*domain.Section, error) {
	ret := _m.Called(order, courseId)

	var r0 *domain.Section
	var r1 error
	if rf, ok := ret.Get(0).(func(int, uint) (*domain.Section, error)); ok {
		return rf(order, courseId)
	}
	if rf, ok := ret.Get(0).(func(int, uint) *domain.Section); ok {
		r0 = rf(order, courseId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Section)
		}
	}

	if rf, ok := ret.Get(1).(func(int, uint) error); ok {
		r1 = rf(order, courseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByTitleAndSectionId provides a mock function with given fields: title, sectionId
func (_m *ModuleRepository) GetByTitleAndSectionId(title string, sectionId uint) (*domain.Module, error) {
	ret := _m.Called(title, sectionId)

	var r0 *domain.Module
	var r1 error
	if rf, ok := ret.Get(0).(func(string, uint) (*domain.Module, error)); ok {
		return rf(title, sectionId)
	}
	if rf, ok := ret.Get(0).(func(string, uint) *domain.Module); ok {
		r0 = rf(title, sectionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Module)
		}
	}

	if rf, ok := ret.Get(1).(func(string, uint) error); ok {
		r1 = rf(title, sectionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByTitleSectionAndCourseId provides a mock function with given fields: title, courseId
func (_m *ModuleRepository) GetByTitleSectionAndCourseId(title string, courseId uint) (*domain.Section, error) {
	ret := _m.Called(title, courseId)

	var r0 *domain.Section
	var r1 error
	if rf, ok := ret.Get(0).(func(string, uint) (*domain.Section, error)); ok {
		return rf(title, courseId)
	}
	if rf, ok := ret.Get(0).(func(string, uint) *domain.Section); ok {
		r0 = rf(title, courseId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Section)
		}
	}

	if rf, ok := ret.Get(1).(func(string, uint) error); ok {
		r1 = rf(title, courseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByTypeAndId provides a mock function with given fields: id, modulType
func (_m *ModuleRepository) GetByTypeAndId(id uint, modulType string) (*domain.Module, error) {
	ret := _m.Called(id, modulType)

	var r0 *domain.Module
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, string) (*domain.Module, error)); ok {
		return rf(id, modulType)
	}
	if rf, ok := ret.Get(0).(func(uint, string) *domain.Module); ok {
		r0 = rf(id, modulType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Module)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, string) error); ok {
		r1 = rf(id, modulType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModuleById provides a mock function with given fields: id
func (_m *ModuleRepository) GetModuleById(id uint) (*domain.Module, error) {
	ret := _m.Called(id)

	var r0 *domain.Module
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*domain.Module, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *domain.Module); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Module)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateModule provides a mock function with given fields: updateModul, moduleExist
func (_m *ModuleRepository) UpdateModule(updateModul *domain.Module, moduleExist *domain.Module) error {
	ret := _m.Called(updateModul, moduleExist)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Module, *domain.Module) error); ok {
		r0 = rf(updateModul, moduleExist)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOrderModule provides a mock function with given fields: order, moduleExist
func (_m *ModuleRepository) UpdateOrderModule(order int, moduleExist *domain.Module) error {
	ret := _m.Called(order, moduleExist)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, *domain.Module) error); ok {
		r0 = rf(order, moduleExist)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOrderSection provides a mock function with given fields: order, sectionExist
func (_m *ModuleRepository) UpdateOrderSection(order int, sectionExist *domain.Section) error {
	ret := _m.Called(order, sectionExist)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, *domain.Section) error); ok {
		r0 = rf(order, sectionExist)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSection provides a mock function with given fields: UpdateSection, sectionExist
func (_m *ModuleRepository) UpdateSection(UpdateSection *domain.Section, sectionExist *domain.Section) error {
	ret := _m.Called(UpdateSection, sectionExist)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Section, *domain.Section) error); ok {
		r0 = rf(UpdateSection, sectionExist)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewModuleRepository creates a new instance of ModuleRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewModuleRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ModuleRepository {
	mock := &ModuleRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
