// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	web "github.com/HarsaEdu/harsa-api/internal/model/web"
)

// ChatbotService is an autogenerated mock type for the ChatbotService type
type ChatbotService struct {
	mock.Mock
}

// ChatWithAssistant provides a mock function with given fields: threadId, request
func (_m *ChatbotService) ChatWithAssistant(threadId string, request *web.ChatWithAssistantRequest) (string, error) {
	ret := _m.Called(threadId, request)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *web.ChatWithAssistantRequest) (string, error)); ok {
		return rf(threadId, request)
	}
	if rf, ok := ret.Get(0).(func(string, *web.ChatWithAssistantRequest) string); ok {
		r0 = rf(threadId, request)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, *web.ChatWithAssistantRequest) error); ok {
		r1 = rf(threadId, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateThread provides a mock function with given fields: request, userId
func (_m *ChatbotService) CreateThread(request *web.CreateThreadRequest, userId uint) error {
	ret := _m.Called(request, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(*web.CreateThreadRequest, uint) error); ok {
		r0 = rf(request, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: threadId, userID, role
func (_m *ChatbotService) Delete(threadId string, userID uint, role string) error {
	ret := _m.Called(threadId, userID, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint, string) error); ok {
		r0 = rf(threadId, userID, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllMessagesInThread provides a mock function with given fields: threadId, limit, after, before
func (_m *ChatbotService) GetAllMessagesInThread(threadId string, limit int, after string, before string) ([]web.GetMessageInThreadResponse, error) {
	ret := _m.Called(threadId, limit, after, before)

	var r0 []web.GetMessageInThreadResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, string, string) ([]web.GetMessageInThreadResponse, error)); ok {
		return rf(threadId, limit, after, before)
	}
	if rf, ok := ret.Get(0).(func(string, int, string, string) []web.GetMessageInThreadResponse); ok {
		r0 = rf(threadId, limit, after, before)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]web.GetMessageInThreadResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, string, string) error); ok {
		r1 = rf(threadId, limit, after, before)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllThreadByUserId provides a mock function with given fields: userId
func (_m *ChatbotService) GetAllThreadByUserId(userId uint) ([]web.GetAllThreadByUserIdResponse, error) {
	ret := _m.Called(userId)

	var r0 []web.GetAllThreadByUserIdResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]web.GetAllThreadByUserIdResponse, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(uint) []web.GetAllThreadByUserIdResponse); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]web.GetAllThreadByUserIdResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: threadId, userID, update, role
func (_m *ChatbotService) Update(threadId string, userID uint, update *web.CreateThreadRequest, role string) error {
	ret := _m.Called(threadId, userID, update, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint, *web.CreateThreadRequest, string) error); ok {
		r0 = rf(threadId, userID, update, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewChatbotService creates a new instance of ChatbotService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChatbotService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChatbotService {
	mock := &ChatbotService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
