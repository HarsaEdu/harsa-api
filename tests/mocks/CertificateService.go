// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/HarsaEdu/harsa-api/internal/model/domain"
	mock "github.com/stretchr/testify/mock"
)

// CertificateService is an autogenerated mock type for the CertificateService type
type CertificateService struct {
	mock.Mock
}

// GenerateCertificate provides a mock function with given fields: courseTrackingId, userId
func (_m *CertificateService) GenerateCertificate(courseTrackingId uint, userId uint) ([]byte, *domain.Certificate, error) {
	ret := _m.Called(courseTrackingId, userId)

	var r0 []byte
	var r1 *domain.Certificate
	var r2 error
	if rf, ok := ret.Get(0).(func(uint, uint) ([]byte, *domain.Certificate, error)); ok {
		return rf(courseTrackingId, userId)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) []byte); ok {
		r0 = rf(courseTrackingId, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint) *domain.Certificate); ok {
		r1 = rf(courseTrackingId, userId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.Certificate)
		}
	}

	if rf, ok := ret.Get(2).(func(uint, uint) error); ok {
		r2 = rf(courseTrackingId, userId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewCertificateService creates a new instance of CertificateService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCertificateService(t interface {
	mock.TestingT
	Cleanup(func())
}) *CertificateService {
	mock := &CertificateService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
