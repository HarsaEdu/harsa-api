// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/HarsaEdu/harsa-api/internal/model/domain"
	echo "github.com/labstack/echo/v4"

	mock "github.com/stretchr/testify/mock"

	web "github.com/HarsaEdu/harsa-api/internal/model/web"
)

// ProfileService is an autogenerated mock type for the ProfileService type
type ProfileService struct {
	mock.Mock
}

// CreateProfile provides a mock function with given fields: ctx, profile, userID
func (_m *ProfileService) CreateProfile(ctx echo.Context, profile *web.CreateProfileRequest, userID uint) error {
	ret := _m.Called(ctx, profile, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, *web.CreateProfileRequest, uint) error); ok {
		r0 = rf(ctx, profile, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProfileByID provides a mock function with given fields: request
func (_m *ProfileService) GetProfileByID(request *web.UserGetByIDRequest) (*domain.ProfileDetail, error) {
	ret := _m.Called(request)

	var r0 *domain.ProfileDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(*web.UserGetByIDRequest) (*domain.ProfileDetail, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*web.UserGetByIDRequest) *domain.ProfileDetail); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ProfileDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(*web.UserGetByIDRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MyProfile provides a mock function with given fields: request
func (_m *ProfileService) MyProfile(request *web.UserGetByIDRequest) (*domain.ProfileDetailMobile, error) {
	ret := _m.Called(request)

	var r0 *domain.ProfileDetailMobile
	var r1 error
	if rf, ok := ret.Get(0).(func(*web.UserGetByIDRequest) (*domain.ProfileDetailMobile, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*web.UserGetByIDRequest) *domain.ProfileDetailMobile); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ProfileDetailMobile)
		}
	}

	if rf, ok := ret.Get(1).(func(*web.UserGetByIDRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProfile provides a mock function with given fields: ctx, profile, id
func (_m *ProfileService) UpdateProfile(ctx echo.Context, profile *web.UpdateProfileRequest, id uint) error {
	ret := _m.Called(ctx, profile, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, *web.UpdateProfileRequest, uint) error); ok {
		r0 = rf(ctx, profile, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewProfileService creates a new instance of ProfileService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProfileService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProfileService {
	mock := &ProfileService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
