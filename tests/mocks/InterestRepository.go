// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/HarsaEdu/harsa-api/internal/model/domain"
	mock "github.com/stretchr/testify/mock"
)

// InterestRepository is an autogenerated mock type for the InterestRepository type
type InterestRepository struct {
	mock.Mock
}

// CreateInterest provides a mock function with given fields: interest
func (_m *InterestRepository) CreateInterest(interest *domain.UserInterest) error {
	ret := _m.Called(interest)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.UserInterest) error); ok {
		r0 = rf(interest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByProfileID provides a mock function with given fields: profileID
func (_m *InterestRepository) FindByProfileID(profileID uint) (*domain.UserInterest, error) {
	ret := _m.Called(profileID)

	var r0 *domain.UserInterest
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*domain.UserInterest, error)); ok {
		return rf(profileID)
	}
	if rf, ok := ret.Get(0).(func(uint) *domain.UserInterest); ok {
		r0 = rf(profileID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.UserInterest)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(profileID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInterestRecommendation provides a mock function with given fields: profileID
func (_m *InterestRepository) GetInterestRecommendation(profileID uint) ([]domain.CourseEntity, int64, error) {
	ret := _m.Called(profileID)

	var r0 []domain.CourseEntity
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(uint) ([]domain.CourseEntity, int64, error)); ok {
		return rf(profileID)
	}
	if rf, ok := ret.Get(0).(func(uint) []domain.CourseEntity); ok {
		r0 = rf(profileID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.CourseEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) int64); ok {
		r1 = rf(profileID)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(uint) error); ok {
		r2 = rf(profileID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetTopInterests provides a mock function with given fields: limit
func (_m *InterestRepository) GetTopInterests(limit int) ([]domain.UserInterest, error) {
	ret := _m.Called(limit)

	var r0 []domain.UserInterest
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]domain.UserInterest, error)); ok {
		return rf(limit)
	}
	if rf, ok := ret.Get(0).(func(int) []domain.UserInterest); ok {
		r0 = rf(limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.UserInterest)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewInterestRepository creates a new instance of InterestRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInterestRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *InterestRepository {
	mock := &InterestRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
