// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"

	mock "github.com/stretchr/testify/mock"
)

// FeedbackHandler is an autogenerated mock type for the FeedbackHandler type
type FeedbackHandler struct {
	mock.Mock
}

// CreateByUserAndCourseId provides a mock function with given fields: ctx
func (_m *FeedbackHandler) CreateByUserAndCourseId(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteById provides a mock function with given fields: ctx
func (_m *FeedbackHandler) DeleteById(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByUserAndCourseId provides a mock function with given fields: ctx
func (_m *FeedbackHandler) DeleteByUserAndCourseId(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllByCourseId provides a mock function with given fields: ctx
func (_m *FeedbackHandler) GetAllByCourseId(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByIdAndCourseId provides a mock function with given fields: ctx
func (_m *FeedbackHandler) GetByIdAndCourseId(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByIdUserAndCourseId provides a mock function with given fields: ctx
func (_m *FeedbackHandler) GetByIdUserAndCourseId(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateByUserAndCourseId provides a mock function with given fields: ctx
func (_m *FeedbackHandler) UpdateByUserAndCourseId(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewFeedbackHandler creates a new instance of FeedbackHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFeedbackHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *FeedbackHandler {
	mock := &FeedbackHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
