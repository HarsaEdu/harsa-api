// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/HarsaEdu/harsa-api/internal/model/domain"
	mock "github.com/stretchr/testify/mock"

	web "github.com/HarsaEdu/harsa-api/internal/model/web"
)

// SubmissionRepository is an autogenerated mock type for the SubmissionRepository type
type SubmissionRepository struct {
	mock.Mock
}

// CekUserIDfromModuleID provides a mock function with given fields: id, userId, role
func (_m *SubmissionRepository) CekUserIDfromModuleID(id uint, userId uint, role string) error {
	ret := _m.Called(id, userId, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint, string) error); ok {
		r0 = rf(id, userId, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CekUserIDfromSubmission provides a mock function with given fields: id, userId, role
func (_m *SubmissionRepository) CekUserIDfromSubmission(id uint, userId uint, role string) error {
	ret := _m.Called(id, userId, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint, string) error); ok {
		r0 = rf(id, userId, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: submission
func (_m *SubmissionRepository) Create(submission *domain.Submissions) error {
	ret := _m.Called(submission)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Submissions) error); ok {
		r0 = rf(submission)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *SubmissionRepository) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindById provides a mock function with given fields: id
func (_m *SubmissionRepository) FindById(id int) (*domain.Submissions, error) {
	ret := _m.Called(id)

	var r0 *domain.Submissions
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*domain.Submissions, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *domain.Submissions); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Submissions)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: moduleId
func (_m *SubmissionRepository) GetAll(moduleId int) ([]domain.Submissions, int64, error) {
	ret := _m.Called(moduleId)

	var r0 []domain.Submissions
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int) ([]domain.Submissions, int64, error)); ok {
		return rf(moduleId)
	}
	if rf, ok := ret.Get(0).(func(int) []domain.Submissions); ok {
		r0 = rf(moduleId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Submissions)
		}
	}

	if rf, ok := ret.Get(1).(func(int) int64); ok {
		r1 = rf(moduleId)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(moduleId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAllWeb provides a mock function with given fields: moduleId
func (_m *SubmissionRepository) GetAllWeb(moduleId int) ([]web.SubmissionsResponseWeb, int64, error) {
	ret := _m.Called(moduleId)

	var r0 []web.SubmissionsResponseWeb
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int) ([]web.SubmissionsResponseWeb, int64, error)); ok {
		return rf(moduleId)
	}
	if rf, ok := ret.Get(0).(func(int) []web.SubmissionsResponseWeb); ok {
		r0 = rf(moduleId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]web.SubmissionsResponseWeb)
		}
	}

	if rf, ok := ret.Get(1).(func(int) int64); ok {
		r1 = rf(moduleId)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(moduleId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: submission, submissionId
func (_m *SubmissionRepository) Update(submission *domain.Submissions, submissionId int) error {
	ret := _m.Called(submission, submissionId)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Submissions, int) error); ok {
		r0 = rf(submission, submissionId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSubmissionRepository creates a new instance of SubmissionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSubmissionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *SubmissionRepository {
	mock := &SubmissionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
