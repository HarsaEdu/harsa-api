// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// PasswordComparer is an autogenerated mock type for the PasswordComparer type
type PasswordComparer struct {
	mock.Mock
}

// ComparePassword provides a mock function with given fields: hashedPassword, plainPassword
func (_m *PasswordComparer) ComparePassword(hashedPassword string, plainPassword string) error {
	ret := _m.Called(hashedPassword, plainPassword)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(hashedPassword, plainPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HashPassword provides a mock function with given fields: _a0
func (_m *PasswordComparer) HashPassword(_a0 string) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPasswordComparer creates a new instance of PasswordComparer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPasswordComparer(t interface {
	mock.TestingT
	Cleanup(func())
}) *PasswordComparer {
	mock := &PasswordComparer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
