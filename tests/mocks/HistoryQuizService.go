// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	web "github.com/HarsaEdu/harsa-api/internal/model/web"
)

// HistoryQuizService is an autogenerated mock type for the HistoryQuizService type
type HistoryQuizService struct {
	mock.Mock
}

// Create provides a mock function with given fields: request, userID, quizID
func (_m *HistoryQuizService) Create(request []web.AnswersRequest, userID uint, quizID uint) error {
	ret := _m.Called(request, userID, quizID)

	var r0 error
	if rf, ok := ret.Get(0).(func([]web.AnswersRequest, uint, uint) error); ok {
		r0 = rf(request, userID, quizID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllByQuizWeb provides a mock function with given fields: quizId, offset, limit, search
func (_m *HistoryQuizService) GetAllByQuizWeb(quizId uint, offset int, limit int, search string) ([]web.HistoryQuizResponseWeb, *web.Pagination, error) {
	ret := _m.Called(quizId, offset, limit, search)

	var r0 []web.HistoryQuizResponseWeb
	var r1 *web.Pagination
	var r2 error
	if rf, ok := ret.Get(0).(func(uint, int, int, string) ([]web.HistoryQuizResponseWeb, *web.Pagination, error)); ok {
		return rf(quizId, offset, limit, search)
	}
	if rf, ok := ret.Get(0).(func(uint, int, int, string) []web.HistoryQuizResponseWeb); ok {
		r0 = rf(quizId, offset, limit, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]web.HistoryQuizResponseWeb)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, int, int, string) *web.Pagination); ok {
		r1 = rf(quizId, offset, limit, search)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*web.Pagination)
		}
	}

	if rf, ok := ret.Get(2).(func(uint, int, int, string) error); ok {
		r2 = rf(quizId, offset, limit, search)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetById provides a mock function with given fields: id
func (_m *HistoryQuizService) GetById(id uint) (*web.HistoryQuizResponseWeb, error) {
	ret := _m.Called(id)

	var r0 *web.HistoryQuizResponseWeb
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*web.HistoryQuizResponseWeb, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *web.HistoryQuizResponseWeb); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*web.HistoryQuizResponseWeb)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewHistoryQuizService creates a new instance of HistoryQuizService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHistoryQuizService(t interface {
	mock.TestingT
	Cleanup(func())
}) *HistoryQuizService {
	mock := &HistoryQuizService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
