// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/HarsaEdu/harsa-api/internal/model/domain"
	mock "github.com/stretchr/testify/mock"
)

// QuestionsRepository is an autogenerated mock type for the QuestionsRepository type
type QuestionsRepository struct {
	mock.Mock
}

// CekIdFromQuestion provides a mock function with given fields: userId, questionId, role
func (_m *QuestionsRepository) CekIdFromQuestion(userId uint, questionId uint, role string) (*domain.Questions, error) {
	ret := _m.Called(userId, questionId, role)

	var r0 *domain.Questions
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint, string) (*domain.Questions, error)); ok {
		return rf(userId, questionId, role)
	}
	if rf, ok := ret.Get(0).(func(uint, uint, string) *domain.Questions); ok {
		r0 = rf(userId, questionId, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Questions)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint, string) error); ok {
		r1 = rf(userId, questionId, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: question
func (_m *QuestionsRepository) Delete(question *domain.Questions) error {
	ret := _m.Called(question)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Questions) error); ok {
		r0 = rf(question)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewQuestionsRepository creates a new instance of QuestionsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQuestionsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *QuestionsRepository {
	mock := &QuestionsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
