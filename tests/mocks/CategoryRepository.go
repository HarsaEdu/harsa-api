// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/HarsaEdu/harsa-api/internal/model/domain"
	mock "github.com/stretchr/testify/mock"
)

// CategoryRepository is an autogenerated mock type for the CategoryRepository type
type CategoryRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: category
func (_m *CategoryRepository) Create(category *domain.Category) error {
	ret := _m.Called(category)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Category) error); ok {
		r0 = rf(category)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *CategoryRepository) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindById provides a mock function with given fields: id
func (_m *CategoryRepository) FindById(id int) (*domain.Category, error) {
	ret := _m.Called(id)

	var r0 *domain.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*domain.Category, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *domain.Category); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByName provides a mock function with given fields: name
func (_m *CategoryRepository) FindByName(name string) (*domain.Category, error) {
	ret := _m.Called(name)

	var r0 *domain.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Category, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Category); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: offset, limit, search
func (_m *CategoryRepository) GetAll(offset int, limit int, search string) ([]domain.Category, int64, error) {
	ret := _m.Called(offset, limit, search)

	var r0 []domain.Category
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, string) ([]domain.Category, int64, error)); ok {
		return rf(offset, limit, search)
	}
	if rf, ok := ret.Get(0).(func(int, int, string) []domain.Category); ok {
		r0 = rf(offset, limit, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string) int64); ok {
		r1 = rf(offset, limit, search)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int, string) error); ok {
		r2 = rf(offset, limit, search)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: category, id
func (_m *CategoryRepository) Update(category *domain.Category, id int) error {
	ret := _m.Called(category, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Category, int) error); ok {
		r0 = rf(category, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateImage provides a mock function with given fields: imageUrl, icon, id
func (_m *CategoryRepository) UpdateImage(imageUrl string, icon string, id int) error {
	ret := _m.Called(imageUrl, icon, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, int) error); ok {
		r0 = rf(imageUrl, icon, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCategoryRepository creates a new instance of CategoryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCategoryRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CategoryRepository {
	mock := &CategoryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
